// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: enums.proto

package protobuf

import (
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EPublishedFileQueryType int32

const (
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByVote                                  EPublishedFileQueryType = 0
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByPublicationDate                       EPublishedFileQueryType = 1
	EPublishedFileQueryType_k_PublishedFileQueryType_AcceptedForGameRankedByAcceptanceDate         EPublishedFileQueryType = 2
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByTrend                                 EPublishedFileQueryType = 3
	EPublishedFileQueryType_k_PublishedFileQueryType_FavoritedByFriendsRankedByPublicationDate     EPublishedFileQueryType = 4
	EPublishedFileQueryType_k_PublishedFileQueryType_CreatedByFriendsRankedByPublicationDate       EPublishedFileQueryType = 5
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByNumTimesReported                      EPublishedFileQueryType = 6
	EPublishedFileQueryType_k_PublishedFileQueryType_CreatedByFollowedUsersRankedByPublicationDate EPublishedFileQueryType = 7
	EPublishedFileQueryType_k_PublishedFileQueryType_NotYetRated                                   EPublishedFileQueryType = 8
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByTotalUniqueSubscriptions              EPublishedFileQueryType = 9
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByTotalVotesAsc                         EPublishedFileQueryType = 10
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByVotesUp                               EPublishedFileQueryType = 11
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByTextSearch                            EPublishedFileQueryType = 12
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByPlaytimeTrend                         EPublishedFileQueryType = 13
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByTotalPlaytime                         EPublishedFileQueryType = 14
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByAveragePlaytimeTrend                  EPublishedFileQueryType = 15
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByLifetimeAveragePlaytime               EPublishedFileQueryType = 16
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByPlaytimeSessionsTrend                 EPublishedFileQueryType = 17
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByLifetimePlaytimeSessions              EPublishedFileQueryType = 18
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByInappropriateContentRating            EPublishedFileQueryType = 19
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByBanContentCheck                       EPublishedFileQueryType = 20
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByLastUpdatedDate                       EPublishedFileQueryType = 21
)

// Enum value maps for EPublishedFileQueryType.
var (
	EPublishedFileQueryType_name = map[int32]string{
		0:  "k_PublishedFileQueryType_RankedByVote",
		1:  "k_PublishedFileQueryType_RankedByPublicationDate",
		2:  "k_PublishedFileQueryType_AcceptedForGameRankedByAcceptanceDate",
		3:  "k_PublishedFileQueryType_RankedByTrend",
		4:  "k_PublishedFileQueryType_FavoritedByFriendsRankedByPublicationDate",
		5:  "k_PublishedFileQueryType_CreatedByFriendsRankedByPublicationDate",
		6:  "k_PublishedFileQueryType_RankedByNumTimesReported",
		7:  "k_PublishedFileQueryType_CreatedByFollowedUsersRankedByPublicationDate",
		8:  "k_PublishedFileQueryType_NotYetRated",
		9:  "k_PublishedFileQueryType_RankedByTotalUniqueSubscriptions",
		10: "k_PublishedFileQueryType_RankedByTotalVotesAsc",
		11: "k_PublishedFileQueryType_RankedByVotesUp",
		12: "k_PublishedFileQueryType_RankedByTextSearch",
		13: "k_PublishedFileQueryType_RankedByPlaytimeTrend",
		14: "k_PublishedFileQueryType_RankedByTotalPlaytime",
		15: "k_PublishedFileQueryType_RankedByAveragePlaytimeTrend",
		16: "k_PublishedFileQueryType_RankedByLifetimeAveragePlaytime",
		17: "k_PublishedFileQueryType_RankedByPlaytimeSessionsTrend",
		18: "k_PublishedFileQueryType_RankedByLifetimePlaytimeSessions",
		19: "k_PublishedFileQueryType_RankedByInappropriateContentRating",
		20: "k_PublishedFileQueryType_RankedByBanContentCheck",
		21: "k_PublishedFileQueryType_RankedByLastUpdatedDate",
	}
	EPublishedFileQueryType_value = map[string]int32{
		"k_PublishedFileQueryType_RankedByVote":                                  0,
		"k_PublishedFileQueryType_RankedByPublicationDate":                       1,
		"k_PublishedFileQueryType_AcceptedForGameRankedByAcceptanceDate":         2,
		"k_PublishedFileQueryType_RankedByTrend":                                 3,
		"k_PublishedFileQueryType_FavoritedByFriendsRankedByPublicationDate":     4,
		"k_PublishedFileQueryType_CreatedByFriendsRankedByPublicationDate":       5,
		"k_PublishedFileQueryType_RankedByNumTimesReported":                      6,
		"k_PublishedFileQueryType_CreatedByFollowedUsersRankedByPublicationDate": 7,
		"k_PublishedFileQueryType_NotYetRated":                                   8,
		"k_PublishedFileQueryType_RankedByTotalUniqueSubscriptions":              9,
		"k_PublishedFileQueryType_RankedByTotalVotesAsc":                         10,
		"k_PublishedFileQueryType_RankedByVotesUp":                               11,
		"k_PublishedFileQueryType_RankedByTextSearch":                            12,
		"k_PublishedFileQueryType_RankedByPlaytimeTrend":                         13,
		"k_PublishedFileQueryType_RankedByTotalPlaytime":                         14,
		"k_PublishedFileQueryType_RankedByAveragePlaytimeTrend":                  15,
		"k_PublishedFileQueryType_RankedByLifetimeAveragePlaytime":               16,
		"k_PublishedFileQueryType_RankedByPlaytimeSessionsTrend":                 17,
		"k_PublishedFileQueryType_RankedByLifetimePlaytimeSessions":              18,
		"k_PublishedFileQueryType_RankedByInappropriateContentRating":            19,
		"k_PublishedFileQueryType_RankedByBanContentCheck":                       20,
		"k_PublishedFileQueryType_RankedByLastUpdatedDate":                       21,
	}
)

func (x EPublishedFileQueryType) Enum() *EPublishedFileQueryType {
	p := new(EPublishedFileQueryType)
	*p = x
	return p
}

func (x EPublishedFileQueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPublishedFileQueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[0].Descriptor()
}

func (EPublishedFileQueryType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[0]
}

func (x EPublishedFileQueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPublishedFileQueryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPublishedFileQueryType(num)
	return nil
}

// Deprecated: Use EPublishedFileQueryType.Descriptor instead.
func (EPublishedFileQueryType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{0}
}

type EPublishedFileInappropriateProvider int32

const (
	EPublishedFileInappropriateProvider_k_EPublishedFileInappropriateProvider_Invalid EPublishedFileInappropriateProvider = 0
	EPublishedFileInappropriateProvider_k_EPublishedFileInappropriateProvider_Google  EPublishedFileInappropriateProvider = 1
	EPublishedFileInappropriateProvider_k_EPublishedFileInappropriateProvider_Amazon  EPublishedFileInappropriateProvider = 2
)

// Enum value maps for EPublishedFileInappropriateProvider.
var (
	EPublishedFileInappropriateProvider_name = map[int32]string{
		0: "k_EPublishedFileInappropriateProvider_Invalid",
		1: "k_EPublishedFileInappropriateProvider_Google",
		2: "k_EPublishedFileInappropriateProvider_Amazon",
	}
	EPublishedFileInappropriateProvider_value = map[string]int32{
		"k_EPublishedFileInappropriateProvider_Invalid": 0,
		"k_EPublishedFileInappropriateProvider_Google":  1,
		"k_EPublishedFileInappropriateProvider_Amazon":  2,
	}
)

func (x EPublishedFileInappropriateProvider) Enum() *EPublishedFileInappropriateProvider {
	p := new(EPublishedFileInappropriateProvider)
	*p = x
	return p
}

func (x EPublishedFileInappropriateProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPublishedFileInappropriateProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[1].Descriptor()
}

func (EPublishedFileInappropriateProvider) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[1]
}

func (x EPublishedFileInappropriateProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPublishedFileInappropriateProvider) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPublishedFileInappropriateProvider(num)
	return nil
}

// Deprecated: Use EPublishedFileInappropriateProvider.Descriptor instead.
func (EPublishedFileInappropriateProvider) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{1}
}

type EPublishedFileInappropriateResult int32

const (
	EPublishedFileInappropriateResult_k_EPublishedFileInappropriateResult_NotScanned   EPublishedFileInappropriateResult = 0
	EPublishedFileInappropriateResult_k_EPublishedFileInappropriateResult_VeryUnlikely EPublishedFileInappropriateResult = 1
	EPublishedFileInappropriateResult_k_EPublishedFileInappropriateResult_Unlikely     EPublishedFileInappropriateResult = 30
	EPublishedFileInappropriateResult_k_EPublishedFileInappropriateResult_Possible     EPublishedFileInappropriateResult = 50
	EPublishedFileInappropriateResult_k_EPublishedFileInappropriateResult_Likely       EPublishedFileInappropriateResult = 75
	EPublishedFileInappropriateResult_k_EPublishedFileInappropriateResult_VeryLikely   EPublishedFileInappropriateResult = 100
)

// Enum value maps for EPublishedFileInappropriateResult.
var (
	EPublishedFileInappropriateResult_name = map[int32]string{
		0:   "k_EPublishedFileInappropriateResult_NotScanned",
		1:   "k_EPublishedFileInappropriateResult_VeryUnlikely",
		30:  "k_EPublishedFileInappropriateResult_Unlikely",
		50:  "k_EPublishedFileInappropriateResult_Possible",
		75:  "k_EPublishedFileInappropriateResult_Likely",
		100: "k_EPublishedFileInappropriateResult_VeryLikely",
	}
	EPublishedFileInappropriateResult_value = map[string]int32{
		"k_EPublishedFileInappropriateResult_NotScanned":   0,
		"k_EPublishedFileInappropriateResult_VeryUnlikely": 1,
		"k_EPublishedFileInappropriateResult_Unlikely":     30,
		"k_EPublishedFileInappropriateResult_Possible":     50,
		"k_EPublishedFileInappropriateResult_Likely":       75,
		"k_EPublishedFileInappropriateResult_VeryLikely":   100,
	}
)

func (x EPublishedFileInappropriateResult) Enum() *EPublishedFileInappropriateResult {
	p := new(EPublishedFileInappropriateResult)
	*p = x
	return p
}

func (x EPublishedFileInappropriateResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPublishedFileInappropriateResult) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[2].Descriptor()
}

func (EPublishedFileInappropriateResult) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[2]
}

func (x EPublishedFileInappropriateResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPublishedFileInappropriateResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPublishedFileInappropriateResult(num)
	return nil
}

// Deprecated: Use EPublishedFileInappropriateResult.Descriptor instead.
func (EPublishedFileInappropriateResult) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{2}
}

type EPersonaStateFlag int32

const (
	EPersonaStateFlag_k_EPersonaStateFlag_HasRichPresence      EPersonaStateFlag = 1
	EPersonaStateFlag_k_EPersonaStateFlag_InJoinableGame       EPersonaStateFlag = 2
	EPersonaStateFlag_k_EPersonaStateFlag_Golden               EPersonaStateFlag = 4
	EPersonaStateFlag_k_EPersonaStateFlag_RemotePlayTogether   EPersonaStateFlag = 8
	EPersonaStateFlag_k_EPersonaStateFlag_ClientTypeWeb        EPersonaStateFlag = 256
	EPersonaStateFlag_k_EPersonaStateFlag_ClientTypeMobile     EPersonaStateFlag = 512
	EPersonaStateFlag_k_EPersonaStateFlag_ClientTypeTenfoot    EPersonaStateFlag = 1024
	EPersonaStateFlag_k_EPersonaStateFlag_ClientTypeVR         EPersonaStateFlag = 2048
	EPersonaStateFlag_k_EPersonaStateFlag_LaunchTypeGamepad    EPersonaStateFlag = 4096
	EPersonaStateFlag_k_EPersonaStateFlag_LaunchTypeCompatTool EPersonaStateFlag = 8192
)

// Enum value maps for EPersonaStateFlag.
var (
	EPersonaStateFlag_name = map[int32]string{
		1:    "k_EPersonaStateFlag_HasRichPresence",
		2:    "k_EPersonaStateFlag_InJoinableGame",
		4:    "k_EPersonaStateFlag_Golden",
		8:    "k_EPersonaStateFlag_RemotePlayTogether",
		256:  "k_EPersonaStateFlag_ClientTypeWeb",
		512:  "k_EPersonaStateFlag_ClientTypeMobile",
		1024: "k_EPersonaStateFlag_ClientTypeTenfoot",
		2048: "k_EPersonaStateFlag_ClientTypeVR",
		4096: "k_EPersonaStateFlag_LaunchTypeGamepad",
		8192: "k_EPersonaStateFlag_LaunchTypeCompatTool",
	}
	EPersonaStateFlag_value = map[string]int32{
		"k_EPersonaStateFlag_HasRichPresence":      1,
		"k_EPersonaStateFlag_InJoinableGame":       2,
		"k_EPersonaStateFlag_Golden":               4,
		"k_EPersonaStateFlag_RemotePlayTogether":   8,
		"k_EPersonaStateFlag_ClientTypeWeb":        256,
		"k_EPersonaStateFlag_ClientTypeMobile":     512,
		"k_EPersonaStateFlag_ClientTypeTenfoot":    1024,
		"k_EPersonaStateFlag_ClientTypeVR":         2048,
		"k_EPersonaStateFlag_LaunchTypeGamepad":    4096,
		"k_EPersonaStateFlag_LaunchTypeCompatTool": 8192,
	}
)

func (x EPersonaStateFlag) Enum() *EPersonaStateFlag {
	p := new(EPersonaStateFlag)
	*p = x
	return p
}

func (x EPersonaStateFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPersonaStateFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[3].Descriptor()
}

func (EPersonaStateFlag) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[3]
}

func (x EPersonaStateFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPersonaStateFlag) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPersonaStateFlag(num)
	return nil
}

// Deprecated: Use EPersonaStateFlag.Descriptor instead.
func (EPersonaStateFlag) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{3}
}

type EContentCheckProvider int32

const (
	EContentCheckProvider_k_EContentCheckProvider_Invalid EContentCheckProvider = 0
	EContentCheckProvider_k_EContentCheckProvider_Google  EContentCheckProvider = 1
	EContentCheckProvider_k_EContentCheckProvider_Amazon  EContentCheckProvider = 2
	EContentCheckProvider_k_EContentCheckProvider_Local   EContentCheckProvider = 3
)

// Enum value maps for EContentCheckProvider.
var (
	EContentCheckProvider_name = map[int32]string{
		0: "k_EContentCheckProvider_Invalid",
		1: "k_EContentCheckProvider_Google",
		2: "k_EContentCheckProvider_Amazon",
		3: "k_EContentCheckProvider_Local",
	}
	EContentCheckProvider_value = map[string]int32{
		"k_EContentCheckProvider_Invalid": 0,
		"k_EContentCheckProvider_Google":  1,
		"k_EContentCheckProvider_Amazon":  2,
		"k_EContentCheckProvider_Local":   3,
	}
)

func (x EContentCheckProvider) Enum() *EContentCheckProvider {
	p := new(EContentCheckProvider)
	*p = x
	return p
}

func (x EContentCheckProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EContentCheckProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[4].Descriptor()
}

func (EContentCheckProvider) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[4]
}

func (x EContentCheckProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EContentCheckProvider) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EContentCheckProvider(num)
	return nil
}

// Deprecated: Use EContentCheckProvider.Descriptor instead.
func (EContentCheckProvider) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{4}
}

type EBanContentCheckResult int32

const (
	EBanContentCheckResult_k_EBanContentCheckResult_NotScanned    EBanContentCheckResult = 0
	EBanContentCheckResult_k_EBanContentCheckResult_Reset         EBanContentCheckResult = 1
	EBanContentCheckResult_k_EBanContentCheckResult_NeedsChecking EBanContentCheckResult = 2
	EBanContentCheckResult_k_EBanContentCheckResult_VeryUnlikely  EBanContentCheckResult = 5
	EBanContentCheckResult_k_EBanContentCheckResult_Unlikely      EBanContentCheckResult = 30
	EBanContentCheckResult_k_EBanContentCheckResult_Possible      EBanContentCheckResult = 50
	EBanContentCheckResult_k_EBanContentCheckResult_Likely        EBanContentCheckResult = 75
	EBanContentCheckResult_k_EBanContentCheckResult_VeryLikely    EBanContentCheckResult = 100
)

// Enum value maps for EBanContentCheckResult.
var (
	EBanContentCheckResult_name = map[int32]string{
		0:   "k_EBanContentCheckResult_NotScanned",
		1:   "k_EBanContentCheckResult_Reset",
		2:   "k_EBanContentCheckResult_NeedsChecking",
		5:   "k_EBanContentCheckResult_VeryUnlikely",
		30:  "k_EBanContentCheckResult_Unlikely",
		50:  "k_EBanContentCheckResult_Possible",
		75:  "k_EBanContentCheckResult_Likely",
		100: "k_EBanContentCheckResult_VeryLikely",
	}
	EBanContentCheckResult_value = map[string]int32{
		"k_EBanContentCheckResult_NotScanned":    0,
		"k_EBanContentCheckResult_Reset":         1,
		"k_EBanContentCheckResult_NeedsChecking": 2,
		"k_EBanContentCheckResult_VeryUnlikely":  5,
		"k_EBanContentCheckResult_Unlikely":      30,
		"k_EBanContentCheckResult_Possible":      50,
		"k_EBanContentCheckResult_Likely":        75,
		"k_EBanContentCheckResult_VeryLikely":    100,
	}
)

func (x EBanContentCheckResult) Enum() *EBanContentCheckResult {
	p := new(EBanContentCheckResult)
	*p = x
	return p
}

func (x EBanContentCheckResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBanContentCheckResult) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[5].Descriptor()
}

func (EBanContentCheckResult) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[5]
}

func (x EBanContentCheckResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBanContentCheckResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBanContentCheckResult(num)
	return nil
}

// Deprecated: Use EBanContentCheckResult.Descriptor instead.
func (EBanContentCheckResult) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{5}
}

type EProfileCustomizationType int32

const (
	EProfileCustomizationType_k_EProfileCustomizationTypeInvalid                   EProfileCustomizationType = 0
	EProfileCustomizationType_k_EProfileCustomizationTypeRareAchievementShowcase   EProfileCustomizationType = 1
	EProfileCustomizationType_k_EProfileCustomizationTypeGameCollector             EProfileCustomizationType = 2
	EProfileCustomizationType_k_EProfileCustomizationTypeItemShowcase              EProfileCustomizationType = 3
	EProfileCustomizationType_k_EProfileCustomizationTypeTradeShowcase             EProfileCustomizationType = 4
	EProfileCustomizationType_k_EProfileCustomizationTypeBadges                    EProfileCustomizationType = 5
	EProfileCustomizationType_k_EProfileCustomizationTypeFavoriteGame              EProfileCustomizationType = 6
	EProfileCustomizationType_k_EProfileCustomizationTypeScreenshotShowcase        EProfileCustomizationType = 7
	EProfileCustomizationType_k_EProfileCustomizationTypeCustomText                EProfileCustomizationType = 8
	EProfileCustomizationType_k_EProfileCustomizationTypeFavoriteGroup             EProfileCustomizationType = 9
	EProfileCustomizationType_k_EProfileCustomizationTypeRecommendation            EProfileCustomizationType = 10
	EProfileCustomizationType_k_EProfileCustomizationTypeWorkshopItem              EProfileCustomizationType = 11
	EProfileCustomizationType_k_EProfileCustomizationTypeMyWorkshop                EProfileCustomizationType = 12
	EProfileCustomizationType_k_EProfileCustomizationTypeArtworkShowcase           EProfileCustomizationType = 13
	EProfileCustomizationType_k_EProfileCustomizationTypeVideoShowcase             EProfileCustomizationType = 14
	EProfileCustomizationType_k_EProfileCustomizationTypeGuides                    EProfileCustomizationType = 15
	EProfileCustomizationType_k_EProfileCustomizationTypeMyGuides                  EProfileCustomizationType = 16
	EProfileCustomizationType_k_EProfileCustomizationTypeAchievements              EProfileCustomizationType = 17
	EProfileCustomizationType_k_EProfileCustomizationTypeGreenlight                EProfileCustomizationType = 18
	EProfileCustomizationType_k_EProfileCustomizationTypeMyGreenlight              EProfileCustomizationType = 19
	EProfileCustomizationType_k_EProfileCustomizationTypeSalien                    EProfileCustomizationType = 20
	EProfileCustomizationType_k_EProfileCustomizationTypeLoyaltyRewardReactions    EProfileCustomizationType = 21
	EProfileCustomizationType_k_EProfileCustomizationTypeSingleArtworkShowcase     EProfileCustomizationType = 22
	EProfileCustomizationType_k_EProfileCustomizationTypeAchievementsCompletionist EProfileCustomizationType = 23
)

// Enum value maps for EProfileCustomizationType.
var (
	EProfileCustomizationType_name = map[int32]string{
		0:  "k_EProfileCustomizationTypeInvalid",
		1:  "k_EProfileCustomizationTypeRareAchievementShowcase",
		2:  "k_EProfileCustomizationTypeGameCollector",
		3:  "k_EProfileCustomizationTypeItemShowcase",
		4:  "k_EProfileCustomizationTypeTradeShowcase",
		5:  "k_EProfileCustomizationTypeBadges",
		6:  "k_EProfileCustomizationTypeFavoriteGame",
		7:  "k_EProfileCustomizationTypeScreenshotShowcase",
		8:  "k_EProfileCustomizationTypeCustomText",
		9:  "k_EProfileCustomizationTypeFavoriteGroup",
		10: "k_EProfileCustomizationTypeRecommendation",
		11: "k_EProfileCustomizationTypeWorkshopItem",
		12: "k_EProfileCustomizationTypeMyWorkshop",
		13: "k_EProfileCustomizationTypeArtworkShowcase",
		14: "k_EProfileCustomizationTypeVideoShowcase",
		15: "k_EProfileCustomizationTypeGuides",
		16: "k_EProfileCustomizationTypeMyGuides",
		17: "k_EProfileCustomizationTypeAchievements",
		18: "k_EProfileCustomizationTypeGreenlight",
		19: "k_EProfileCustomizationTypeMyGreenlight",
		20: "k_EProfileCustomizationTypeSalien",
		21: "k_EProfileCustomizationTypeLoyaltyRewardReactions",
		22: "k_EProfileCustomizationTypeSingleArtworkShowcase",
		23: "k_EProfileCustomizationTypeAchievementsCompletionist",
	}
	EProfileCustomizationType_value = map[string]int32{
		"k_EProfileCustomizationTypeInvalid":                   0,
		"k_EProfileCustomizationTypeRareAchievementShowcase":   1,
		"k_EProfileCustomizationTypeGameCollector":             2,
		"k_EProfileCustomizationTypeItemShowcase":              3,
		"k_EProfileCustomizationTypeTradeShowcase":             4,
		"k_EProfileCustomizationTypeBadges":                    5,
		"k_EProfileCustomizationTypeFavoriteGame":              6,
		"k_EProfileCustomizationTypeScreenshotShowcase":        7,
		"k_EProfileCustomizationTypeCustomText":                8,
		"k_EProfileCustomizationTypeFavoriteGroup":             9,
		"k_EProfileCustomizationTypeRecommendation":            10,
		"k_EProfileCustomizationTypeWorkshopItem":              11,
		"k_EProfileCustomizationTypeMyWorkshop":                12,
		"k_EProfileCustomizationTypeArtworkShowcase":           13,
		"k_EProfileCustomizationTypeVideoShowcase":             14,
		"k_EProfileCustomizationTypeGuides":                    15,
		"k_EProfileCustomizationTypeMyGuides":                  16,
		"k_EProfileCustomizationTypeAchievements":              17,
		"k_EProfileCustomizationTypeGreenlight":                18,
		"k_EProfileCustomizationTypeMyGreenlight":              19,
		"k_EProfileCustomizationTypeSalien":                    20,
		"k_EProfileCustomizationTypeLoyaltyRewardReactions":    21,
		"k_EProfileCustomizationTypeSingleArtworkShowcase":     22,
		"k_EProfileCustomizationTypeAchievementsCompletionist": 23,
	}
)

func (x EProfileCustomizationType) Enum() *EProfileCustomizationType {
	p := new(EProfileCustomizationType)
	*p = x
	return p
}

func (x EProfileCustomizationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EProfileCustomizationType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[6].Descriptor()
}

func (EProfileCustomizationType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[6]
}

func (x EProfileCustomizationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EProfileCustomizationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EProfileCustomizationType(num)
	return nil
}

// Deprecated: Use EProfileCustomizationType.Descriptor instead.
func (EProfileCustomizationType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{6}
}

type EPublishedFileStorageSystem int32

const (
	EPublishedFileStorageSystem_k_EPublishedFileStorageSystemInvalid     EPublishedFileStorageSystem = 0
	EPublishedFileStorageSystem_k_EPublishedFileStorageSystemLegacyCloud EPublishedFileStorageSystem = 1
	EPublishedFileStorageSystem_k_EPublishedFileStorageSystemDepot       EPublishedFileStorageSystem = 2
	EPublishedFileStorageSystem_k_EPublishedFileStorageSystemUGCCloud    EPublishedFileStorageSystem = 3
)

// Enum value maps for EPublishedFileStorageSystem.
var (
	EPublishedFileStorageSystem_name = map[int32]string{
		0: "k_EPublishedFileStorageSystemInvalid",
		1: "k_EPublishedFileStorageSystemLegacyCloud",
		2: "k_EPublishedFileStorageSystemDepot",
		3: "k_EPublishedFileStorageSystemUGCCloud",
	}
	EPublishedFileStorageSystem_value = map[string]int32{
		"k_EPublishedFileStorageSystemInvalid":     0,
		"k_EPublishedFileStorageSystemLegacyCloud": 1,
		"k_EPublishedFileStorageSystemDepot":       2,
		"k_EPublishedFileStorageSystemUGCCloud":    3,
	}
)

func (x EPublishedFileStorageSystem) Enum() *EPublishedFileStorageSystem {
	p := new(EPublishedFileStorageSystem)
	*p = x
	return p
}

func (x EPublishedFileStorageSystem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPublishedFileStorageSystem) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[7].Descriptor()
}

func (EPublishedFileStorageSystem) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[7]
}

func (x EPublishedFileStorageSystem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPublishedFileStorageSystem) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPublishedFileStorageSystem(num)
	return nil
}

// Deprecated: Use EPublishedFileStorageSystem.Descriptor instead.
func (EPublishedFileStorageSystem) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{7}
}

type ECloudStoragePersistState int32

const (
	ECloudStoragePersistState_k_ECloudStoragePersistStatePersisted ECloudStoragePersistState = 0
	ECloudStoragePersistState_k_ECloudStoragePersistStateForgotten ECloudStoragePersistState = 1
	ECloudStoragePersistState_k_ECloudStoragePersistStateDeleted   ECloudStoragePersistState = 2
)

// Enum value maps for ECloudStoragePersistState.
var (
	ECloudStoragePersistState_name = map[int32]string{
		0: "k_ECloudStoragePersistStatePersisted",
		1: "k_ECloudStoragePersistStateForgotten",
		2: "k_ECloudStoragePersistStateDeleted",
	}
	ECloudStoragePersistState_value = map[string]int32{
		"k_ECloudStoragePersistStatePersisted": 0,
		"k_ECloudStoragePersistStateForgotten": 1,
		"k_ECloudStoragePersistStateDeleted":   2,
	}
)

func (x ECloudStoragePersistState) Enum() *ECloudStoragePersistState {
	p := new(ECloudStoragePersistState)
	*p = x
	return p
}

func (x ECloudStoragePersistState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECloudStoragePersistState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[8].Descriptor()
}

func (ECloudStoragePersistState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[8]
}

func (x ECloudStoragePersistState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECloudStoragePersistState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECloudStoragePersistState(num)
	return nil
}

// Deprecated: Use ECloudStoragePersistState.Descriptor instead.
func (ECloudStoragePersistState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{8}
}

type EBluetoothDeviceType int32

const (
	EBluetoothDeviceType_k_BluetoothDeviceType_Invalid    EBluetoothDeviceType = 0
	EBluetoothDeviceType_k_BluetoothDeviceType_Unknown    EBluetoothDeviceType = 1
	EBluetoothDeviceType_k_BluetoothDeviceType_Phone      EBluetoothDeviceType = 2
	EBluetoothDeviceType_k_BluetoothDeviceType_Computer   EBluetoothDeviceType = 3
	EBluetoothDeviceType_k_BluetoothDeviceType_Headset    EBluetoothDeviceType = 4
	EBluetoothDeviceType_k_BluetoothDeviceType_Headphones EBluetoothDeviceType = 5
	EBluetoothDeviceType_k_BluetoothDeviceType_Speakers   EBluetoothDeviceType = 6
	EBluetoothDeviceType_k_BluetoothDeviceType_OtherAudio EBluetoothDeviceType = 7
	EBluetoothDeviceType_k_BluetoothDeviceType_Mouse      EBluetoothDeviceType = 8
	EBluetoothDeviceType_k_BluetoothDeviceType_Joystick   EBluetoothDeviceType = 9
	EBluetoothDeviceType_k_BluetoothDeviceType_Gamepad    EBluetoothDeviceType = 10
	EBluetoothDeviceType_k_BluetoothDeviceType_Keyboard   EBluetoothDeviceType = 11
)

// Enum value maps for EBluetoothDeviceType.
var (
	EBluetoothDeviceType_name = map[int32]string{
		0:  "k_BluetoothDeviceType_Invalid",
		1:  "k_BluetoothDeviceType_Unknown",
		2:  "k_BluetoothDeviceType_Phone",
		3:  "k_BluetoothDeviceType_Computer",
		4:  "k_BluetoothDeviceType_Headset",
		5:  "k_BluetoothDeviceType_Headphones",
		6:  "k_BluetoothDeviceType_Speakers",
		7:  "k_BluetoothDeviceType_OtherAudio",
		8:  "k_BluetoothDeviceType_Mouse",
		9:  "k_BluetoothDeviceType_Joystick",
		10: "k_BluetoothDeviceType_Gamepad",
		11: "k_BluetoothDeviceType_Keyboard",
	}
	EBluetoothDeviceType_value = map[string]int32{
		"k_BluetoothDeviceType_Invalid":    0,
		"k_BluetoothDeviceType_Unknown":    1,
		"k_BluetoothDeviceType_Phone":      2,
		"k_BluetoothDeviceType_Computer":   3,
		"k_BluetoothDeviceType_Headset":    4,
		"k_BluetoothDeviceType_Headphones": 5,
		"k_BluetoothDeviceType_Speakers":   6,
		"k_BluetoothDeviceType_OtherAudio": 7,
		"k_BluetoothDeviceType_Mouse":      8,
		"k_BluetoothDeviceType_Joystick":   9,
		"k_BluetoothDeviceType_Gamepad":    10,
		"k_BluetoothDeviceType_Keyboard":   11,
	}
)

func (x EBluetoothDeviceType) Enum() *EBluetoothDeviceType {
	p := new(EBluetoothDeviceType)
	*p = x
	return p
}

func (x EBluetoothDeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBluetoothDeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[9].Descriptor()
}

func (EBluetoothDeviceType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[9]
}

func (x EBluetoothDeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBluetoothDeviceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBluetoothDeviceType(num)
	return nil
}

// Deprecated: Use EBluetoothDeviceType.Descriptor instead.
func (EBluetoothDeviceType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{9}
}

type EStorageBlockContentType int32

const (
	EStorageBlockContentType_k_EStorageBlockContentType_Invalid    EStorageBlockContentType = 0
	EStorageBlockContentType_k_EStorageBlockContentType_Unknown    EStorageBlockContentType = 1
	EStorageBlockContentType_k_EStorageBlockContentType_FileSystem EStorageBlockContentType = 2
	EStorageBlockContentType_k_EStorageBlockContentType_Crypto     EStorageBlockContentType = 3
	EStorageBlockContentType_k_EStorageBlockContentType_Raid       EStorageBlockContentType = 4
)

// Enum value maps for EStorageBlockContentType.
var (
	EStorageBlockContentType_name = map[int32]string{
		0: "k_EStorageBlockContentType_Invalid",
		1: "k_EStorageBlockContentType_Unknown",
		2: "k_EStorageBlockContentType_FileSystem",
		3: "k_EStorageBlockContentType_Crypto",
		4: "k_EStorageBlockContentType_Raid",
	}
	EStorageBlockContentType_value = map[string]int32{
		"k_EStorageBlockContentType_Invalid":    0,
		"k_EStorageBlockContentType_Unknown":    1,
		"k_EStorageBlockContentType_FileSystem": 2,
		"k_EStorageBlockContentType_Crypto":     3,
		"k_EStorageBlockContentType_Raid":       4,
	}
)

func (x EStorageBlockContentType) Enum() *EStorageBlockContentType {
	p := new(EStorageBlockContentType)
	*p = x
	return p
}

func (x EStorageBlockContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStorageBlockContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[10].Descriptor()
}

func (EStorageBlockContentType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[10]
}

func (x EStorageBlockContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStorageBlockContentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStorageBlockContentType(num)
	return nil
}

// Deprecated: Use EStorageBlockContentType.Descriptor instead.
func (EStorageBlockContentType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{10}
}

type EStorageBlockFileSystemType int32

const (
	EStorageBlockFileSystemType_k_EStorageBlockFileSystemType_Invalid EStorageBlockFileSystemType = 0
	EStorageBlockFileSystemType_k_EStorageBlockFileSystemType_Unknown EStorageBlockFileSystemType = 1
	EStorageBlockFileSystemType_k_EStorageBlockFileSystemType_VFat    EStorageBlockFileSystemType = 2
	EStorageBlockFileSystemType_k_EStorageBlockFileSystemType_Ext4    EStorageBlockFileSystemType = 3
)

// Enum value maps for EStorageBlockFileSystemType.
var (
	EStorageBlockFileSystemType_name = map[int32]string{
		0: "k_EStorageBlockFileSystemType_Invalid",
		1: "k_EStorageBlockFileSystemType_Unknown",
		2: "k_EStorageBlockFileSystemType_VFat",
		3: "k_EStorageBlockFileSystemType_Ext4",
	}
	EStorageBlockFileSystemType_value = map[string]int32{
		"k_EStorageBlockFileSystemType_Invalid": 0,
		"k_EStorageBlockFileSystemType_Unknown": 1,
		"k_EStorageBlockFileSystemType_VFat":    2,
		"k_EStorageBlockFileSystemType_Ext4":    3,
	}
)

func (x EStorageBlockFileSystemType) Enum() *EStorageBlockFileSystemType {
	p := new(EStorageBlockFileSystemType)
	*p = x
	return p
}

func (x EStorageBlockFileSystemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStorageBlockFileSystemType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[11].Descriptor()
}

func (EStorageBlockFileSystemType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[11]
}

func (x EStorageBlockFileSystemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStorageBlockFileSystemType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStorageBlockFileSystemType(num)
	return nil
}

// Deprecated: Use EStorageBlockFileSystemType.Descriptor instead.
func (EStorageBlockFileSystemType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{11}
}

var File_enums_proto protoreflect.FileDescriptor

var file_enums_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0x80, 0x0a, 0x0a, 0x17, 0x45, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x10, 0x00, 0x12, 0x34,
	0x0a, 0x30, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65,
	0x64, 0x42, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x10, 0x01, 0x12, 0x42, 0x0a, 0x3e, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x10, 0x03, 0x12, 0x46, 0x0a, 0x42, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x10, 0x04, 0x12, 0x44, 0x0a, 0x40,
	0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42,
	0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x10, 0x05, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x06, 0x12, 0x4a, 0x0a, 0x46, 0x6b, 0x5f, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x42, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x59, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x64, 0x10, 0x08, 0x12,
	0x3d, 0x0a, 0x39, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x42, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x09, 0x12, 0x32,
	0x0a, 0x2e, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65,
	0x64, 0x42, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x41, 0x73, 0x63,
	0x10, 0x0a, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x55, 0x70, 0x10, 0x0b,
	0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e,
	0x6b, 0x65, 0x64, 0x42, 0x79, 0x54, 0x65, 0x78, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x10,
	0x0c, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61,
	0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x10, 0x0d, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x10, 0x0e, 0x12, 0x39, 0x0a, 0x35, 0x6b, 0x5f, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x10, 0x0f, 0x12, 0x3c, 0x0a, 0x38, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x10, 0x10, 0x12, 0x3a, 0x0a, 0x36, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x10, 0x11, 0x12, 0x3d,
	0x0a, 0x39, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65,
	0x64, 0x42, 0x79, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x12, 0x12, 0x3f, 0x0a,
	0x3b, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x13, 0x12, 0x34,
	0x0a, 0x30, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65,
	0x64, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x10, 0x14, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x10, 0x15, 0x2a, 0xbc, 0x01, 0x0a, 0x23, 0x45,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x10, 0x02, 0x2a, 0xd5, 0x02, 0x0a, 0x21, 0x45, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72,
	0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x56, 0x65, 0x72, 0x79, 0x55,
	0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x55, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x10, 0x1e, 0x12, 0x30, 0x0a, 0x2c, 0x6b,
	0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x32, 0x12, 0x2e, 0x0a,
	0x2a, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x10, 0x4b, 0x12, 0x32, 0x0a,
	0x2e, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x56, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x10,
	0x64, 0x2a, 0xb1, 0x03, 0x0a, 0x11, 0x45, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x48,
	0x61, 0x73, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x10, 0x01,
	0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x49, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f,
	0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x57, 0x65, 0x62, 0x10, 0x80, 0x02, 0x12, 0x29, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x10, 0x80, 0x04, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x6e, 0x66, 0x6f, 0x6f, 0x74,
	0x10, 0x80, 0x08, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x56, 0x52, 0x10, 0x80, 0x10, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f,
	0x45, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x5f, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x10, 0x80, 0x20, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x54, 0x6f,
	0x6f, 0x6c, 0x10, 0x80, 0x40, 0x2a, 0xa7, 0x01, 0x0a, 0x15, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d,
	0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x03, 0x2a,
	0xd8, 0x02, 0x0a, 0x16, 0x45, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f,
	0x45, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x42, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x56, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x10, 0x05, 0x12, 0x25,
	0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x55, 0x6e, 0x6c, 0x69, 0x6b,
	0x65, 0x6c, 0x79, 0x10, 0x1e, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x42, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x32, 0x12, 0x23, 0x0a, 0x1f,
	0x6b, 0x5f, 0x45, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x10,
	0x4b, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x56, 0x65,
	0x72, 0x79, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x10, 0x64, 0x2a, 0xec, 0x08, 0x0a, 0x19, 0x45,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00,
	0x12, 0x36, 0x0a, 0x32, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x61, 0x72, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x68,
	0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73,
	0x65, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x10,
	0x04, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x61, 0x64, 0x67, 0x65, 0x73, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x10, 0x06, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x68,
	0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78,
	0x74, 0x10, 0x08, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10,
	0x09, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0a,
	0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x0b, 0x12, 0x29, 0x0a,
	0x25, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x79, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x10, 0x0c, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x68,
	0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x10, 0x0d, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x68, 0x6f, 0x77,
	0x63, 0x61, 0x73, 0x65, 0x10, 0x0e, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x73, 0x10, 0x0f, 0x12, 0x27, 0x0a,
	0x23, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x79, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x73, 0x10, 0x10, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x10, 0x11, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x10, 0x12, 0x12, 0x2b,
	0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x79, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x10, 0x13, 0x12, 0x25, 0x0a, 0x21, 0x6b,
	0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x61, 0x6c, 0x69, 0x65, 0x6e,
	0x10, 0x14, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x15, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x45,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x10, 0x16, 0x12,
	0x38, 0x0a, 0x34, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x73, 0x74, 0x10, 0x17, 0x2a, 0xc8, 0x01, 0x0a, 0x1b, 0x45, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x10,
	0x01, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x47, 0x43, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x10, 0x03, 0x2a, 0x97, 0x01, 0x0a, 0x19, 0x45, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x67, 0x6f,
	0x74, 0x74, 0x65, 0x6e, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x02, 0x2a, 0xc0,
	0x03, 0x0a, 0x14, 0x45, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x42, 0x6c, 0x75,
	0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f,
	0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x22,
	0x0a, 0x1e, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72,
	0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74,
	0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x65, 0x61, 0x64,
	0x73, 0x65, 0x74, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48,
	0x65, 0x61, 0x64, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x6b,
	0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x10, 0x06, 0x12,
	0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d,
	0x6f, 0x75, 0x73, 0x65, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f,
	0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x10, 0x0a, 0x12, 0x22, 0x0a,
	0x1e, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x10,
	0x0b, 0x2a, 0xe1, 0x01, 0x0a, 0x18, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x29,
	0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x10, 0x03,
	0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x61, 0x69, 0x64, 0x10, 0x04, 0x2a, 0xc3, 0x01, 0x0a, 0x1b, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00,
	0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x46, 0x61,
	0x74, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x78, 0x74, 0x34, 0x10, 0x03, 0x42, 0x09, 0x48, 0x01, 0x80,
	0x01, 0x01, 0x80, 0xb5, 0x18, 0x01,
}

var (
	file_enums_proto_rawDescOnce sync.Once
	file_enums_proto_rawDescData = file_enums_proto_rawDesc
)

func file_enums_proto_rawDescGZIP() []byte {
	file_enums_proto_rawDescOnce.Do(func() {
		file_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_enums_proto_rawDescData)
	})
	return file_enums_proto_rawDescData
}

var file_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_enums_proto_goTypes = []interface{}{
	(EPublishedFileQueryType)(0),             // 0: EPublishedFileQueryType
	(EPublishedFileInappropriateProvider)(0), // 1: EPublishedFileInappropriateProvider
	(EPublishedFileInappropriateResult)(0),   // 2: EPublishedFileInappropriateResult
	(EPersonaStateFlag)(0),                   // 3: EPersonaStateFlag
	(EContentCheckProvider)(0),               // 4: EContentCheckProvider
	(EBanContentCheckResult)(0),              // 5: EBanContentCheckResult
	(EProfileCustomizationType)(0),           // 6: EProfileCustomizationType
	(EPublishedFileStorageSystem)(0),         // 7: EPublishedFileStorageSystem
	(ECloudStoragePersistState)(0),           // 8: ECloudStoragePersistState
	(EBluetoothDeviceType)(0),                // 9: EBluetoothDeviceType
	(EStorageBlockContentType)(0),            // 10: EStorageBlockContentType
	(EStorageBlockFileSystemType)(0),         // 11: EStorageBlockFileSystemType
}
var file_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_enums_proto_init() }
func file_enums_proto_init() {
	if File_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enums_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enums_proto_goTypes,
		DependencyIndexes: file_enums_proto_depIdxs,
		EnumInfos:         file_enums_proto_enumTypes,
	}.Build()
	File_enums_proto = out.File
	file_enums_proto_rawDesc = nil
	file_enums_proto_goTypes = nil
	file_enums_proto_depIdxs = nil
}
