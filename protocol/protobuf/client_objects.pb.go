// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: steammessages_client_objects.proto

package protobuf

import (
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ECloudPendingRemoteOperation int32

const (
	ECloudPendingRemoteOperation_k_ECloudPendingRemoteOperationNone                ECloudPendingRemoteOperation = 0
	ECloudPendingRemoteOperation_k_ECloudPendingRemoteOperationAppSessionActive    ECloudPendingRemoteOperation = 1
	ECloudPendingRemoteOperation_k_ECloudPendingRemoteOperationUploadInProgress    ECloudPendingRemoteOperation = 2
	ECloudPendingRemoteOperation_k_ECloudPendingRemoteOperationUploadPending       ECloudPendingRemoteOperation = 3
	ECloudPendingRemoteOperation_k_ECloudPendingRemoteOperationAppSessionSuspended ECloudPendingRemoteOperation = 4
)

// Enum value maps for ECloudPendingRemoteOperation.
var (
	ECloudPendingRemoteOperation_name = map[int32]string{
		0: "k_ECloudPendingRemoteOperationNone",
		1: "k_ECloudPendingRemoteOperationAppSessionActive",
		2: "k_ECloudPendingRemoteOperationUploadInProgress",
		3: "k_ECloudPendingRemoteOperationUploadPending",
		4: "k_ECloudPendingRemoteOperationAppSessionSuspended",
	}
	ECloudPendingRemoteOperation_value = map[string]int32{
		"k_ECloudPendingRemoteOperationNone":                0,
		"k_ECloudPendingRemoteOperationAppSessionActive":    1,
		"k_ECloudPendingRemoteOperationUploadInProgress":    2,
		"k_ECloudPendingRemoteOperationUploadPending":       3,
		"k_ECloudPendingRemoteOperationAppSessionSuspended": 4,
	}
)

func (x ECloudPendingRemoteOperation) Enum() *ECloudPendingRemoteOperation {
	p := new(ECloudPendingRemoteOperation)
	*p = x
	return p
}

func (x ECloudPendingRemoteOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECloudPendingRemoteOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_client_objects_proto_enumTypes[0].Descriptor()
}

func (ECloudPendingRemoteOperation) Type() protoreflect.EnumType {
	return &file_steammessages_client_objects_proto_enumTypes[0]
}

func (x ECloudPendingRemoteOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECloudPendingRemoteOperation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECloudPendingRemoteOperation(num)
	return nil
}

// Deprecated: Use ECloudPendingRemoteOperation.Descriptor instead.
func (ECloudPendingRemoteOperation) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{0}
}

type SteamMessagesClientIClientForcedEnumDependencies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A *EBluetoothDeviceType        `protobuf:"varint,1,opt,name=a,enum=EBluetoothDeviceType,def=0" json:"a,omitempty"`
	B *EStorageBlockContentType    `protobuf:"varint,2,opt,name=b,enum=EStorageBlockContentType,def=0" json:"b,omitempty"`
	C *EStorageBlockFileSystemType `protobuf:"varint,3,opt,name=c,enum=EStorageBlockFileSystemType,def=0" json:"c,omitempty"`
}

// Default values for SteamMessagesClientIClientForcedEnumDependencies fields.
const (
	Default_SteamMessagesClientIClientForcedEnumDependencies_A = EBluetoothDeviceType(0)        // EBluetoothDeviceType_k_BluetoothDeviceType_Invalid
	Default_SteamMessagesClientIClientForcedEnumDependencies_B = EStorageBlockContentType(0)    // EStorageBlockContentType_k_EStorageBlockContentType_Invalid
	Default_SteamMessagesClientIClientForcedEnumDependencies_C = EStorageBlockFileSystemType(0) // EStorageBlockFileSystemType_k_EStorageBlockFileSystemType_Invalid
)

func (x *SteamMessagesClientIClientForcedEnumDependencies) Reset() {
	*x = SteamMessagesClientIClientForcedEnumDependencies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteamMessagesClientIClientForcedEnumDependencies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteamMessagesClientIClientForcedEnumDependencies) ProtoMessage() {}

func (x *SteamMessagesClientIClientForcedEnumDependencies) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteamMessagesClientIClientForcedEnumDependencies.ProtoReflect.Descriptor instead.
func (*SteamMessagesClientIClientForcedEnumDependencies) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{0}
}

func (x *SteamMessagesClientIClientForcedEnumDependencies) GetA() EBluetoothDeviceType {
	if x != nil && x.A != nil {
		return *x.A
	}
	return Default_SteamMessagesClientIClientForcedEnumDependencies_A
}

func (x *SteamMessagesClientIClientForcedEnumDependencies) GetB() EStorageBlockContentType {
	if x != nil && x.B != nil {
		return *x.B
	}
	return Default_SteamMessagesClientIClientForcedEnumDependencies_B
}

func (x *SteamMessagesClientIClientForcedEnumDependencies) GetC() EStorageBlockFileSystemType {
	if x != nil && x.C != nil {
		return *x.C
	}
	return Default_SteamMessagesClientIClientForcedEnumDependencies_C
}

type CMsgNetworkDeviceIP4Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      *int32 `protobuf:"varint,1,opt,name=ip,def=0" json:"ip,omitempty"`
	Netmask *int32 `protobuf:"varint,2,opt,name=netmask" json:"netmask,omitempty"`
}

// Default values for CMsgNetworkDeviceIP4Address fields.
const (
	Default_CMsgNetworkDeviceIP4Address_Ip = int32(0)
)

func (x *CMsgNetworkDeviceIP4Address) Reset() {
	*x = CMsgNetworkDeviceIP4Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDeviceIP4Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDeviceIP4Address) ProtoMessage() {}

func (x *CMsgNetworkDeviceIP4Address) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDeviceIP4Address.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDeviceIP4Address) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgNetworkDeviceIP4Address) GetIp() int32 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return Default_CMsgNetworkDeviceIP4Address_Ip
}

func (x *CMsgNetworkDeviceIP4Address) GetNetmask() int32 {
	if x != nil && x.Netmask != nil {
		return *x.Netmask
	}
	return 0
}

type CMsgNetworkDeviceIP4Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses      []*CMsgNetworkDeviceIP4Address `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
	DnsIp          []int32                        `protobuf:"varint,2,rep,name=dns_ip,json=dnsIp" json:"dns_ip,omitempty"`
	GatewayIp      *int32                         `protobuf:"varint,3,opt,name=gateway_ip,json=gatewayIp" json:"gateway_ip,omitempty"`
	IsDhcpEnabled  *bool                          `protobuf:"varint,4,opt,name=is_dhcp_enabled,json=isDhcpEnabled" json:"is_dhcp_enabled,omitempty"`
	IsDefaultRoute *bool                          `protobuf:"varint,5,opt,name=is_default_route,json=isDefaultRoute" json:"is_default_route,omitempty"`
	IsEnabled      *bool                          `protobuf:"varint,6,opt,name=is_enabled,json=isEnabled,def=0" json:"is_enabled,omitempty"`
}

// Default values for CMsgNetworkDeviceIP4Config fields.
const (
	Default_CMsgNetworkDeviceIP4Config_IsEnabled = bool(false)
)

func (x *CMsgNetworkDeviceIP4Config) Reset() {
	*x = CMsgNetworkDeviceIP4Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDeviceIP4Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDeviceIP4Config) ProtoMessage() {}

func (x *CMsgNetworkDeviceIP4Config) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDeviceIP4Config.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDeviceIP4Config) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgNetworkDeviceIP4Config) GetAddresses() []*CMsgNetworkDeviceIP4Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *CMsgNetworkDeviceIP4Config) GetDnsIp() []int32 {
	if x != nil {
		return x.DnsIp
	}
	return nil
}

func (x *CMsgNetworkDeviceIP4Config) GetGatewayIp() int32 {
	if x != nil && x.GatewayIp != nil {
		return *x.GatewayIp
	}
	return 0
}

func (x *CMsgNetworkDeviceIP4Config) GetIsDhcpEnabled() bool {
	if x != nil && x.IsDhcpEnabled != nil {
		return *x.IsDhcpEnabled
	}
	return false
}

func (x *CMsgNetworkDeviceIP4Config) GetIsDefaultRoute() bool {
	if x != nil && x.IsDefaultRoute != nil {
		return *x.IsDefaultRoute
	}
	return false
}

func (x *CMsgNetworkDeviceIP4Config) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return Default_CMsgNetworkDeviceIP4Config_IsEnabled
}

type CMsgNetworkDeviceIP6Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip *string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (x *CMsgNetworkDeviceIP6Address) Reset() {
	*x = CMsgNetworkDeviceIP6Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDeviceIP6Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDeviceIP6Address) ProtoMessage() {}

func (x *CMsgNetworkDeviceIP6Address) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDeviceIP6Address.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDeviceIP6Address) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgNetworkDeviceIP6Address) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

type CMsgNetworkDeviceIP6Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses      []*CMsgNetworkDeviceIP6Address `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
	DnsIp          []string                       `protobuf:"bytes,2,rep,name=dns_ip,json=dnsIp" json:"dns_ip,omitempty"`
	GatewayIp      *string                        `protobuf:"bytes,3,opt,name=gateway_ip,json=gatewayIp" json:"gateway_ip,omitempty"`
	IsDhcpEnabled  *bool                          `protobuf:"varint,4,opt,name=is_dhcp_enabled,json=isDhcpEnabled" json:"is_dhcp_enabled,omitempty"`
	IsDefaultRoute *bool                          `protobuf:"varint,5,opt,name=is_default_route,json=isDefaultRoute" json:"is_default_route,omitempty"`
	IsEnabled      *bool                          `protobuf:"varint,6,opt,name=is_enabled,json=isEnabled,def=0" json:"is_enabled,omitempty"`
}

// Default values for CMsgNetworkDeviceIP6Config fields.
const (
	Default_CMsgNetworkDeviceIP6Config_IsEnabled = bool(false)
)

func (x *CMsgNetworkDeviceIP6Config) Reset() {
	*x = CMsgNetworkDeviceIP6Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDeviceIP6Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDeviceIP6Config) ProtoMessage() {}

func (x *CMsgNetworkDeviceIP6Config) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDeviceIP6Config.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDeviceIP6Config) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgNetworkDeviceIP6Config) GetAddresses() []*CMsgNetworkDeviceIP6Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *CMsgNetworkDeviceIP6Config) GetDnsIp() []string {
	if x != nil {
		return x.DnsIp
	}
	return nil
}

func (x *CMsgNetworkDeviceIP6Config) GetGatewayIp() string {
	if x != nil && x.GatewayIp != nil {
		return *x.GatewayIp
	}
	return ""
}

func (x *CMsgNetworkDeviceIP6Config) GetIsDhcpEnabled() bool {
	if x != nil && x.IsDhcpEnabled != nil {
		return *x.IsDhcpEnabled
	}
	return false
}

func (x *CMsgNetworkDeviceIP6Config) GetIsDefaultRoute() bool {
	if x != nil && x.IsDefaultRoute != nil {
		return *x.IsDefaultRoute
	}
	return false
}

func (x *CMsgNetworkDeviceIP6Config) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return Default_CMsgNetworkDeviceIP6Config_IsEnabled
}

type CMsgNetworkDevicesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices               []*CMsgNetworkDevicesData_Device `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty"`
	IsWifiEnabled         *bool                            `protobuf:"varint,2,opt,name=is_wifi_enabled,json=isWifiEnabled" json:"is_wifi_enabled,omitempty"`
	IsWifiScanningEnabled *bool                            `protobuf:"varint,3,opt,name=is_wifi_scanning_enabled,json=isWifiScanningEnabled" json:"is_wifi_scanning_enabled,omitempty"`
}

func (x *CMsgNetworkDevicesData) Reset() {
	*x = CMsgNetworkDevicesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDevicesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDevicesData) ProtoMessage() {}

func (x *CMsgNetworkDevicesData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDevicesData.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDevicesData) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgNetworkDevicesData) GetDevices() []*CMsgNetworkDevicesData_Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *CMsgNetworkDevicesData) GetIsWifiEnabled() bool {
	if x != nil && x.IsWifiEnabled != nil {
		return *x.IsWifiEnabled
	}
	return false
}

func (x *CMsgNetworkDevicesData) GetIsWifiScanningEnabled() bool {
	if x != nil && x.IsWifiScanningEnabled != nil {
		return *x.IsWifiScanningEnabled
	}
	return false
}

type CMsgNetworkDeviceConnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId    *uint32                               `protobuf:"varint,1,opt,name=device_id,json=deviceId,def=0" json:"device_id,omitempty"`
	Credentials *CMsgNetworkDeviceConnect_Credentials `protobuf:"bytes,4,opt,name=credentials" json:"credentials,omitempty"`
	Ip4         *CMsgNetworkDeviceIP4Config           `protobuf:"bytes,5,opt,name=ip4" json:"ip4,omitempty"`
	Ip6         *CMsgNetworkDeviceIP6Config           `protobuf:"bytes,6,opt,name=ip6" json:"ip6,omitempty"`
	// Types that are assignable to ApInfo:
	//	*CMsgNetworkDeviceConnect_ApKnown
	//	*CMsgNetworkDeviceConnect_ApCustom
	ApInfo isCMsgNetworkDeviceConnect_ApInfo `protobuf_oneof:"ap_info"`
}

// Default values for CMsgNetworkDeviceConnect fields.
const (
	Default_CMsgNetworkDeviceConnect_DeviceId = uint32(0)
)

func (x *CMsgNetworkDeviceConnect) Reset() {
	*x = CMsgNetworkDeviceConnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDeviceConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDeviceConnect) ProtoMessage() {}

func (x *CMsgNetworkDeviceConnect) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDeviceConnect.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDeviceConnect) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgNetworkDeviceConnect) GetDeviceId() uint32 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return Default_CMsgNetworkDeviceConnect_DeviceId
}

func (x *CMsgNetworkDeviceConnect) GetCredentials() *CMsgNetworkDeviceConnect_Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *CMsgNetworkDeviceConnect) GetIp4() *CMsgNetworkDeviceIP4Config {
	if x != nil {
		return x.Ip4
	}
	return nil
}

func (x *CMsgNetworkDeviceConnect) GetIp6() *CMsgNetworkDeviceIP6Config {
	if x != nil {
		return x.Ip6
	}
	return nil
}

func (m *CMsgNetworkDeviceConnect) GetApInfo() isCMsgNetworkDeviceConnect_ApInfo {
	if m != nil {
		return m.ApInfo
	}
	return nil
}

func (x *CMsgNetworkDeviceConnect) GetApKnown() *CMsgNetworkDeviceConnect_KnownAP {
	if x, ok := x.GetApInfo().(*CMsgNetworkDeviceConnect_ApKnown); ok {
		return x.ApKnown
	}
	return nil
}

func (x *CMsgNetworkDeviceConnect) GetApCustom() *CMsgNetworkDeviceConnect_CustomAP {
	if x, ok := x.GetApInfo().(*CMsgNetworkDeviceConnect_ApCustom); ok {
		return x.ApCustom
	}
	return nil
}

type isCMsgNetworkDeviceConnect_ApInfo interface {
	isCMsgNetworkDeviceConnect_ApInfo()
}

type CMsgNetworkDeviceConnect_ApKnown struct {
	ApKnown *CMsgNetworkDeviceConnect_KnownAP `protobuf:"bytes,2,opt,name=ap_known,json=apKnown,oneof"`
}

type CMsgNetworkDeviceConnect_ApCustom struct {
	ApCustom *CMsgNetworkDeviceConnect_CustomAP `protobuf:"bytes,3,opt,name=ap_custom,json=apCustom,oneof"`
}

func (*CMsgNetworkDeviceConnect_ApKnown) isCMsgNetworkDeviceConnect_ApInfo() {}

func (*CMsgNetworkDeviceConnect_ApCustom) isCMsgNetworkDeviceConnect_ApInfo() {}

type CMsgStorageDevicesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drives       []*CMsgStorageDevicesData_Drive       `protobuf:"bytes,1,rep,name=drives" json:"drives,omitempty"`
	BlockDevices []*CMsgStorageDevicesData_BlockDevice `protobuf:"bytes,2,rep,name=block_devices,json=blockDevices" json:"block_devices,omitempty"`
}

func (x *CMsgStorageDevicesData) Reset() {
	*x = CMsgStorageDevicesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgStorageDevicesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgStorageDevicesData) ProtoMessage() {}

func (x *CMsgStorageDevicesData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgStorageDevicesData.ProtoReflect.Descriptor instead.
func (*CMsgStorageDevicesData) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgStorageDevicesData) GetDrives() []*CMsgStorageDevicesData_Drive {
	if x != nil {
		return x.Drives
	}
	return nil
}

func (x *CMsgStorageDevicesData) GetBlockDevices() []*CMsgStorageDevicesData_BlockDevice {
	if x != nil {
		return x.BlockDevices
	}
	return nil
}

type CCloud_PendingRemoteOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation       *ECloudPendingRemoteOperation `protobuf:"varint,1,opt,name=operation,enum=ECloudPendingRemoteOperation,def=0" json:"operation,omitempty"`
	MachineName     *string                       `protobuf:"bytes,2,opt,name=machine_name,json=machineName" json:"machine_name,omitempty"`
	ClientId        *uint64                       `protobuf:"varint,3,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	TimeLastUpdated *uint32                       `protobuf:"varint,4,opt,name=time_last_updated,json=timeLastUpdated" json:"time_last_updated,omitempty"`
}

// Default values for CCloud_PendingRemoteOperation fields.
const (
	Default_CCloud_PendingRemoteOperation_Operation = ECloudPendingRemoteOperation_k_ECloudPendingRemoteOperationNone
)

func (x *CCloud_PendingRemoteOperation) Reset() {
	*x = CCloud_PendingRemoteOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_PendingRemoteOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_PendingRemoteOperation) ProtoMessage() {}

func (x *CCloud_PendingRemoteOperation) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_PendingRemoteOperation.ProtoReflect.Descriptor instead.
func (*CCloud_PendingRemoteOperation) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{8}
}

func (x *CCloud_PendingRemoteOperation) GetOperation() ECloudPendingRemoteOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return Default_CCloud_PendingRemoteOperation_Operation
}

func (x *CCloud_PendingRemoteOperation) GetMachineName() string {
	if x != nil && x.MachineName != nil {
		return *x.MachineName
	}
	return ""
}

func (x *CCloud_PendingRemoteOperation) GetClientId() uint64 {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return 0
}

func (x *CCloud_PendingRemoteOperation) GetTimeLastUpdated() uint32 {
	if x != nil && x.TimeLastUpdated != nil {
		return *x.TimeLastUpdated
	}
	return 0
}

type CMsgCloudPendingRemoteOperations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations []*CCloud_PendingRemoteOperation `protobuf:"bytes,1,rep,name=operations" json:"operations,omitempty"`
}

func (x *CMsgCloudPendingRemoteOperations) Reset() {
	*x = CMsgCloudPendingRemoteOperations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCloudPendingRemoteOperations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCloudPendingRemoteOperations) ProtoMessage() {}

func (x *CMsgCloudPendingRemoteOperations) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCloudPendingRemoteOperations.ProtoReflect.Descriptor instead.
func (*CMsgCloudPendingRemoteOperations) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgCloudPendingRemoteOperations) GetOperations() []*CCloud_PendingRemoteOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

type CMsgBluetoothDevicesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adapters []*CMsgBluetoothDevicesData_Adapter `protobuf:"bytes,1,rep,name=adapters" json:"adapters,omitempty"`
	Devices  []*CMsgBluetoothDevicesData_Device  `protobuf:"bytes,2,rep,name=devices" json:"devices,omitempty"`
}

func (x *CMsgBluetoothDevicesData) Reset() {
	*x = CMsgBluetoothDevicesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBluetoothDevicesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBluetoothDevicesData) ProtoMessage() {}

func (x *CMsgBluetoothDevicesData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBluetoothDevicesData.ProtoReflect.Descriptor instead.
func (*CMsgBluetoothDevicesData) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgBluetoothDevicesData) GetAdapters() []*CMsgBluetoothDevicesData_Adapter {
	if x != nil {
		return x.Adapters
	}
	return nil
}

func (x *CMsgBluetoothDevicesData) GetDevices() []*CMsgBluetoothDevicesData_Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

type CMsgBluetoothSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEnabled *bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
}

func (x *CMsgBluetoothSettings) Reset() {
	*x = CMsgBluetoothSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBluetoothSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBluetoothSettings) ProtoMessage() {}

func (x *CMsgBluetoothSettings) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBluetoothSettings.ProtoReflect.Descriptor instead.
func (*CMsgBluetoothSettings) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgBluetoothSettings) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

type CMsgSystemPerfDiagnosticEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgSystemPerfDiagnosticEntry) Reset() {
	*x = CMsgSystemPerfDiagnosticEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemPerfDiagnosticEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemPerfDiagnosticEntry) ProtoMessage() {}

func (x *CMsgSystemPerfDiagnosticEntry) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemPerfDiagnosticEntry.ProtoReflect.Descriptor instead.
func (*CMsgSystemPerfDiagnosticEntry) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgSystemPerfDiagnosticEntry) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSystemPerfDiagnosticEntry) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CMsgSystemPerfNetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Timestamp     *float64 `protobuf:"fixed64,2,opt,name=timestamp" json:"timestamp,omitempty"`
	TxBytesTotal  *int64   `protobuf:"varint,3,opt,name=tx_bytes_total,json=txBytesTotal" json:"tx_bytes_total,omitempty"`
	RxBytesTotal  *int64   `protobuf:"varint,4,opt,name=rx_bytes_total,json=rxBytesTotal" json:"rx_bytes_total,omitempty"`
	TxBytesPerSec *int32   `protobuf:"varint,5,opt,name=tx_bytes_per_sec,json=txBytesPerSec" json:"tx_bytes_per_sec,omitempty"`
	RxBytesPerSec *int32   `protobuf:"varint,6,opt,name=rx_bytes_per_sec,json=rxBytesPerSec" json:"rx_bytes_per_sec,omitempty"`
}

func (x *CMsgSystemPerfNetworkInterface) Reset() {
	*x = CMsgSystemPerfNetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemPerfNetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemPerfNetworkInterface) ProtoMessage() {}

func (x *CMsgSystemPerfNetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemPerfNetworkInterface.ProtoReflect.Descriptor instead.
func (*CMsgSystemPerfNetworkInterface) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgSystemPerfNetworkInterface) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSystemPerfNetworkInterface) GetTimestamp() float64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgSystemPerfNetworkInterface) GetTxBytesTotal() int64 {
	if x != nil && x.TxBytesTotal != nil {
		return *x.TxBytesTotal
	}
	return 0
}

func (x *CMsgSystemPerfNetworkInterface) GetRxBytesTotal() int64 {
	if x != nil && x.RxBytesTotal != nil {
		return *x.RxBytesTotal
	}
	return 0
}

func (x *CMsgSystemPerfNetworkInterface) GetTxBytesPerSec() int32 {
	if x != nil && x.TxBytesPerSec != nil {
		return *x.TxBytesPerSec
	}
	return 0
}

func (x *CMsgSystemPerfNetworkInterface) GetRxBytesPerSec() int32 {
	if x != nil && x.RxBytesPerSec != nil {
		return *x.RxBytesPerSec
	}
	return 0
}

type CMsgSystemPerfDiagnosticInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries    []*CMsgSystemPerfDiagnosticEntry  `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	Interfaces []*CMsgSystemPerfNetworkInterface `protobuf:"bytes,2,rep,name=interfaces" json:"interfaces,omitempty"`
}

func (x *CMsgSystemPerfDiagnosticInfo) Reset() {
	*x = CMsgSystemPerfDiagnosticInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemPerfDiagnosticInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemPerfDiagnosticInfo) ProtoMessage() {}

func (x *CMsgSystemPerfDiagnosticInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemPerfDiagnosticInfo.ProtoReflect.Descriptor instead.
func (*CMsgSystemPerfDiagnosticInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgSystemPerfDiagnosticInfo) GetEntries() []*CMsgSystemPerfDiagnosticEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *CMsgSystemPerfDiagnosticInfo) GetInterfaces() []*CMsgSystemPerfNetworkInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type CMsgSystemPerfSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiagnosticUpdateRate *float32 `protobuf:"fixed32,1,opt,name=diagnostic_update_rate,json=diagnosticUpdateRate" json:"diagnostic_update_rate,omitempty"`
	IsSharkMode          *bool    `protobuf:"varint,2,opt,name=is_shark_mode,json=isSharkMode" json:"is_shark_mode,omitempty"`
}

func (x *CMsgSystemPerfSettings) Reset() {
	*x = CMsgSystemPerfSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemPerfSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemPerfSettings) ProtoMessage() {}

func (x *CMsgSystemPerfSettings) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemPerfSettings.ProtoReflect.Descriptor instead.
func (*CMsgSystemPerfSettings) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgSystemPerfSettings) GetDiagnosticUpdateRate() float32 {
	if x != nil && x.DiagnosticUpdateRate != nil {
		return *x.DiagnosticUpdateRate
	}
	return 0
}

func (x *CMsgSystemPerfSettings) GetIsSharkMode() bool {
	if x != nil && x.IsSharkMode != nil {
		return *x.IsSharkMode
	}
	return false
}

type CMsgCellList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cells []*CMsgCellList_Cell `protobuf:"bytes,1,rep,name=cells" json:"cells,omitempty"`
}

func (x *CMsgCellList) Reset() {
	*x = CMsgCellList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCellList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCellList) ProtoMessage() {}

func (x *CMsgCellList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCellList.ProtoReflect.Descriptor instead.
func (*CMsgCellList) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgCellList) GetCells() []*CMsgCellList_Cell {
	if x != nil {
		return x.Cells
	}
	return nil
}

type CMsgNetworkDevicesData_Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32                                 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Etype    *int32                                  `protobuf:"varint,2,opt,name=etype" json:"etype,omitempty"`
	Estate   *int32                                  `protobuf:"varint,3,opt,name=estate" json:"estate,omitempty"`
	Mac      *string                                 `protobuf:"bytes,4,opt,name=mac" json:"mac,omitempty"`
	Vendor   *string                                 `protobuf:"bytes,5,opt,name=vendor" json:"vendor,omitempty"`
	Product  *string                                 `protobuf:"bytes,6,opt,name=product" json:"product,omitempty"`
	Ip4      *CMsgNetworkDeviceIP4Config             `protobuf:"bytes,7,opt,name=ip4" json:"ip4,omitempty"`
	Ip6      *CMsgNetworkDeviceIP6Config             `protobuf:"bytes,8,opt,name=ip6" json:"ip6,omitempty"`
	Wired    *CMsgNetworkDevicesData_Device_Wired    `protobuf:"bytes,9,opt,name=wired" json:"wired,omitempty"`
	Wireless *CMsgNetworkDevicesData_Device_Wireless `protobuf:"bytes,10,opt,name=wireless" json:"wireless,omitempty"`
}

// Default values for CMsgNetworkDevicesData_Device fields.
const (
	Default_CMsgNetworkDevicesData_Device_Id = uint32(0)
)

func (x *CMsgNetworkDevicesData_Device) Reset() {
	*x = CMsgNetworkDevicesData_Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDevicesData_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDevicesData_Device) ProtoMessage() {}

func (x *CMsgNetworkDevicesData_Device) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDevicesData_Device.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDevicesData_Device) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CMsgNetworkDevicesData_Device) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CMsgNetworkDevicesData_Device_Id
}

func (x *CMsgNetworkDevicesData_Device) GetEtype() int32 {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return 0
}

func (x *CMsgNetworkDevicesData_Device) GetEstate() int32 {
	if x != nil && x.Estate != nil {
		return *x.Estate
	}
	return 0
}

func (x *CMsgNetworkDevicesData_Device) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *CMsgNetworkDevicesData_Device) GetVendor() string {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return ""
}

func (x *CMsgNetworkDevicesData_Device) GetProduct() string {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return ""
}

func (x *CMsgNetworkDevicesData_Device) GetIp4() *CMsgNetworkDeviceIP4Config {
	if x != nil {
		return x.Ip4
	}
	return nil
}

func (x *CMsgNetworkDevicesData_Device) GetIp6() *CMsgNetworkDeviceIP6Config {
	if x != nil {
		return x.Ip6
	}
	return nil
}

func (x *CMsgNetworkDevicesData_Device) GetWired() *CMsgNetworkDevicesData_Device_Wired {
	if x != nil {
		return x.Wired
	}
	return nil
}

func (x *CMsgNetworkDevicesData_Device) GetWireless() *CMsgNetworkDevicesData_Device_Wireless {
	if x != nil {
		return x.Wireless
	}
	return nil
}

type CMsgNetworkDevicesData_Device_Wired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCablePresent *bool   `protobuf:"varint,1,opt,name=is_cable_present,json=isCablePresent,def=0" json:"is_cable_present,omitempty"`
	SpeedMbit      *uint32 `protobuf:"varint,2,opt,name=speed_mbit,json=speedMbit" json:"speed_mbit,omitempty"`
	FriendlyName   *string `protobuf:"bytes,3,opt,name=friendly_name,json=friendlyName" json:"friendly_name,omitempty"`
}

// Default values for CMsgNetworkDevicesData_Device_Wired fields.
const (
	Default_CMsgNetworkDevicesData_Device_Wired_IsCablePresent = bool(false)
)

func (x *CMsgNetworkDevicesData_Device_Wired) Reset() {
	*x = CMsgNetworkDevicesData_Device_Wired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDevicesData_Device_Wired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDevicesData_Device_Wired) ProtoMessage() {}

func (x *CMsgNetworkDevicesData_Device_Wired) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDevicesData_Device_Wired.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDevicesData_Device_Wired) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{5, 0, 0}
}

func (x *CMsgNetworkDevicesData_Device_Wired) GetIsCablePresent() bool {
	if x != nil && x.IsCablePresent != nil {
		return *x.IsCablePresent
	}
	return Default_CMsgNetworkDevicesData_Device_Wired_IsCablePresent
}

func (x *CMsgNetworkDevicesData_Device_Wired) GetSpeedMbit() uint32 {
	if x != nil && x.SpeedMbit != nil {
		return *x.SpeedMbit
	}
	return 0
}

func (x *CMsgNetworkDevicesData_Device_Wired) GetFriendlyName() string {
	if x != nil && x.FriendlyName != nil {
		return *x.FriendlyName
	}
	return ""
}

type CMsgNetworkDevicesData_Device_Wireless struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aps                []*CMsgNetworkDevicesData_Device_Wireless_AP `protobuf:"bytes,1,rep,name=aps" json:"aps,omitempty"`
	EsecuritySupported *int32                                       `protobuf:"varint,2,opt,name=esecurity_supported,json=esecuritySupported" json:"esecurity_supported,omitempty"`
}

func (x *CMsgNetworkDevicesData_Device_Wireless) Reset() {
	*x = CMsgNetworkDevicesData_Device_Wireless{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDevicesData_Device_Wireless) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDevicesData_Device_Wireless) ProtoMessage() {}

func (x *CMsgNetworkDevicesData_Device_Wireless) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDevicesData_Device_Wireless.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDevicesData_Device_Wireless) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{5, 0, 1}
}

func (x *CMsgNetworkDevicesData_Device_Wireless) GetAps() []*CMsgNetworkDevicesData_Device_Wireless_AP {
	if x != nil {
		return x.Aps
	}
	return nil
}

func (x *CMsgNetworkDevicesData_Device_Wireless) GetEsecuritySupported() int32 {
	if x != nil && x.EsecuritySupported != nil {
		return *x.EsecuritySupported
	}
	return 0
}

type CMsgNetworkDevicesData_Device_Wireless_AP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *uint32 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Estrength     *int32  `protobuf:"varint,2,opt,name=estrength" json:"estrength,omitempty"`
	Ssid          *string `protobuf:"bytes,3,opt,name=ssid" json:"ssid,omitempty"`
	IsActive      *bool   `protobuf:"varint,4,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	IsAutoconnect *bool   `protobuf:"varint,5,opt,name=is_autoconnect,json=isAutoconnect" json:"is_autoconnect,omitempty"`
	Esecurity     *int32  `protobuf:"varint,6,opt,name=esecurity" json:"esecurity,omitempty"`
	UserName      *string `protobuf:"bytes,7,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Password      *string `protobuf:"bytes,8,opt,name=password" json:"password,omitempty"`
	StrengthRaw   *int32  `protobuf:"varint,9,opt,name=strength_raw,json=strengthRaw" json:"strength_raw,omitempty"`
}

// Default values for CMsgNetworkDevicesData_Device_Wireless_AP fields.
const (
	Default_CMsgNetworkDevicesData_Device_Wireless_AP_Id = uint32(0)
)

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) Reset() {
	*x = CMsgNetworkDevicesData_Device_Wireless_AP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDevicesData_Device_Wireless_AP) ProtoMessage() {}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDevicesData_Device_Wireless_AP.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDevicesData_Device_Wireless_AP) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{5, 0, 1, 0}
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CMsgNetworkDevicesData_Device_Wireless_AP_Id
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) GetEstrength() int32 {
	if x != nil && x.Estrength != nil {
		return *x.Estrength
	}
	return 0
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) GetSsid() string {
	if x != nil && x.Ssid != nil {
		return *x.Ssid
	}
	return ""
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) GetIsAutoconnect() bool {
	if x != nil && x.IsAutoconnect != nil {
		return *x.IsAutoconnect
	}
	return false
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) GetEsecurity() int32 {
	if x != nil && x.Esecurity != nil {
		return *x.Esecurity
	}
	return 0
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) GetStrengthRaw() int32 {
	if x != nil && x.StrengthRaw != nil {
		return *x.StrengthRaw
	}
	return 0
}

type CMsgNetworkDeviceConnect_KnownAP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApId *uint32 `protobuf:"varint,1,opt,name=ap_id,json=apId" json:"ap_id,omitempty"`
}

func (x *CMsgNetworkDeviceConnect_KnownAP) Reset() {
	*x = CMsgNetworkDeviceConnect_KnownAP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDeviceConnect_KnownAP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDeviceConnect_KnownAP) ProtoMessage() {}

func (x *CMsgNetworkDeviceConnect_KnownAP) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDeviceConnect_KnownAP.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDeviceConnect_KnownAP) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CMsgNetworkDeviceConnect_KnownAP) GetApId() uint32 {
	if x != nil && x.ApId != nil {
		return *x.ApId
	}
	return 0
}

type CMsgNetworkDeviceConnect_CustomAP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssid      *string `protobuf:"bytes,1,opt,name=ssid" json:"ssid,omitempty"`
	Esecurity *int32  `protobuf:"varint,2,opt,name=esecurity" json:"esecurity,omitempty"`
}

func (x *CMsgNetworkDeviceConnect_CustomAP) Reset() {
	*x = CMsgNetworkDeviceConnect_CustomAP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDeviceConnect_CustomAP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDeviceConnect_CustomAP) ProtoMessage() {}

func (x *CMsgNetworkDeviceConnect_CustomAP) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDeviceConnect_CustomAP.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDeviceConnect_CustomAP) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{6, 1}
}

func (x *CMsgNetworkDeviceConnect_CustomAP) GetSsid() string {
	if x != nil && x.Ssid != nil {
		return *x.Ssid
	}
	return ""
}

func (x *CMsgNetworkDeviceConnect_CustomAP) GetEsecurity() int32 {
	if x != nil && x.Esecurity != nil {
		return *x.Esecurity
	}
	return 0
}

type CMsgNetworkDeviceConnect_Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username *string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password *string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (x *CMsgNetworkDeviceConnect_Credentials) Reset() {
	*x = CMsgNetworkDeviceConnect_Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDeviceConnect_Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDeviceConnect_Credentials) ProtoMessage() {}

func (x *CMsgNetworkDeviceConnect_Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDeviceConnect_Credentials.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDeviceConnect_Credentials) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{6, 2}
}

func (x *CMsgNetworkDeviceConnect_Credentials) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *CMsgNetworkDeviceConnect_Credentials) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type CMsgStorageDevicesData_Drive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint32 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Model       *string `protobuf:"bytes,2,opt,name=model" json:"model,omitempty"`
	Vendor      *string `protobuf:"bytes,3,opt,name=vendor" json:"vendor,omitempty"`
	Serial      *string `protobuf:"bytes,4,opt,name=serial" json:"serial,omitempty"`
	IsEjectable *bool   `protobuf:"varint,5,opt,name=is_ejectable,json=isEjectable" json:"is_ejectable,omitempty"`
	SizeBytes   *uint64 `protobuf:"varint,6,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
}

// Default values for CMsgStorageDevicesData_Drive fields.
const (
	Default_CMsgStorageDevicesData_Drive_Id = uint32(0)
)

func (x *CMsgStorageDevicesData_Drive) Reset() {
	*x = CMsgStorageDevicesData_Drive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgStorageDevicesData_Drive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgStorageDevicesData_Drive) ProtoMessage() {}

func (x *CMsgStorageDevicesData_Drive) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgStorageDevicesData_Drive.ProtoReflect.Descriptor instead.
func (*CMsgStorageDevicesData_Drive) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CMsgStorageDevicesData_Drive) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CMsgStorageDevicesData_Drive_Id
}

func (x *CMsgStorageDevicesData_Drive) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *CMsgStorageDevicesData_Drive) GetVendor() string {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return ""
}

func (x *CMsgStorageDevicesData_Drive) GetSerial() string {
	if x != nil && x.Serial != nil {
		return *x.Serial
	}
	return ""
}

func (x *CMsgStorageDevicesData_Drive) GetIsEjectable() bool {
	if x != nil && x.IsEjectable != nil {
		return *x.IsEjectable
	}
	return false
}

func (x *CMsgStorageDevicesData_Drive) GetSizeBytes() uint64 {
	if x != nil && x.SizeBytes != nil {
		return *x.SizeBytes
	}
	return 0
}

type CMsgStorageDevicesData_BlockDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *uint32                                  `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	DriveId        *uint32                                  `protobuf:"varint,2,opt,name=drive_id,json=driveId,def=0" json:"drive_id,omitempty"`
	Path           *string                                  `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	FriendlyPath   *string                                  `protobuf:"bytes,4,opt,name=friendly_path,json=friendlyPath" json:"friendly_path,omitempty"`
	Label          *string                                  `protobuf:"bytes,5,opt,name=label" json:"label,omitempty"`
	SizeBytes      *uint64                                  `protobuf:"varint,6,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	IsFormattable  *bool                                    `protobuf:"varint,7,opt,name=is_formattable,json=isFormattable" json:"is_formattable,omitempty"`
	IsReadOnly     *bool                                    `protobuf:"varint,8,opt,name=is_read_only,json=isReadOnly" json:"is_read_only,omitempty"`
	IsRootDevice   *bool                                    `protobuf:"varint,9,opt,name=is_root_device,json=isRootDevice" json:"is_root_device,omitempty"`
	ContentType    *EStorageBlockContentType    `protobuf:"varint,10,opt,name=content_type,json=contentType,enum=EStorageBlockContentType,def=0" json:"content_type,omitempty"`
	FilesystemType *EStorageBlockFileSystemType `protobuf:"varint,11,opt,name=filesystem_type,json=filesystemType,enum=EStorageBlockFileSystemType,def=0" json:"filesystem_type,omitempty"`
	MountPath      *string                                  `protobuf:"bytes,12,opt,name=mount_path,json=mountPath" json:"mount_path,omitempty"`
}

// Default values for CMsgStorageDevicesData_BlockDevice fields.
const (
	Default_CMsgStorageDevicesData_BlockDevice_Id             = uint32(0)
	Default_CMsgStorageDevicesData_BlockDevice_DriveId        = uint32(0)
	Default_CMsgStorageDevicesData_BlockDevice_ContentType    = EStorageBlockContentType(0)    // EStorageBlockContentType_k_EStorageBlockContentType_Invalid
	Default_CMsgStorageDevicesData_BlockDevice_FilesystemType = EStorageBlockFileSystemType(0) // EStorageBlockFileSystemType_k_EStorageBlockFileSystemType_Invalid
)

func (x *CMsgStorageDevicesData_BlockDevice) Reset() {
	*x = CMsgStorageDevicesData_BlockDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgStorageDevicesData_BlockDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgStorageDevicesData_BlockDevice) ProtoMessage() {}

func (x *CMsgStorageDevicesData_BlockDevice) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgStorageDevicesData_BlockDevice.ProtoReflect.Descriptor instead.
func (*CMsgStorageDevicesData_BlockDevice) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{7, 1}
}

func (x *CMsgStorageDevicesData_BlockDevice) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CMsgStorageDevicesData_BlockDevice_Id
}

func (x *CMsgStorageDevicesData_BlockDevice) GetDriveId() uint32 {
	if x != nil && x.DriveId != nil {
		return *x.DriveId
	}
	return Default_CMsgStorageDevicesData_BlockDevice_DriveId
}

func (x *CMsgStorageDevicesData_BlockDevice) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *CMsgStorageDevicesData_BlockDevice) GetFriendlyPath() string {
	if x != nil && x.FriendlyPath != nil {
		return *x.FriendlyPath
	}
	return ""
}

func (x *CMsgStorageDevicesData_BlockDevice) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *CMsgStorageDevicesData_BlockDevice) GetSizeBytes() uint64 {
	if x != nil && x.SizeBytes != nil {
		return *x.SizeBytes
	}
	return 0
}

func (x *CMsgStorageDevicesData_BlockDevice) GetIsFormattable() bool {
	if x != nil && x.IsFormattable != nil {
		return *x.IsFormattable
	}
	return false
}

func (x *CMsgStorageDevicesData_BlockDevice) GetIsReadOnly() bool {
	if x != nil && x.IsReadOnly != nil {
		return *x.IsReadOnly
	}
	return false
}

func (x *CMsgStorageDevicesData_BlockDevice) GetIsRootDevice() bool {
	if x != nil && x.IsRootDevice != nil {
		return *x.IsRootDevice
	}
	return false
}

func (x *CMsgStorageDevicesData_BlockDevice) GetContentType() EStorageBlockContentType {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return Default_CMsgStorageDevicesData_BlockDevice_ContentType
}

func (x *CMsgStorageDevicesData_BlockDevice) GetFilesystemType() EStorageBlockFileSystemType {
	if x != nil && x.FilesystemType != nil {
		return *x.FilesystemType
	}
	return Default_CMsgStorageDevicesData_BlockDevice_FilesystemType
}

func (x *CMsgStorageDevicesData_BlockDevice) GetMountPath() string {
	if x != nil && x.MountPath != nil {
		return *x.MountPath
	}
	return ""
}

type CMsgBluetoothDevicesData_Adapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *uint32 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Mac           *string `protobuf:"bytes,2,opt,name=mac" json:"mac,omitempty"`
	Name          *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	IsEnabled     *bool   `protobuf:"varint,4,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	IsDiscovering *bool   `protobuf:"varint,5,opt,name=is_discovering,json=isDiscovering" json:"is_discovering,omitempty"`
}

// Default values for CMsgBluetoothDevicesData_Adapter fields.
const (
	Default_CMsgBluetoothDevicesData_Adapter_Id = uint32(0)
)

func (x *CMsgBluetoothDevicesData_Adapter) Reset() {
	*x = CMsgBluetoothDevicesData_Adapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBluetoothDevicesData_Adapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBluetoothDevicesData_Adapter) ProtoMessage() {}

func (x *CMsgBluetoothDevicesData_Adapter) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBluetoothDevicesData_Adapter.ProtoReflect.Descriptor instead.
func (*CMsgBluetoothDevicesData_Adapter) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CMsgBluetoothDevicesData_Adapter) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CMsgBluetoothDevicesData_Adapter_Id
}

func (x *CMsgBluetoothDevicesData_Adapter) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *CMsgBluetoothDevicesData_Adapter) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgBluetoothDevicesData_Adapter) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

func (x *CMsgBluetoothDevicesData_Adapter) GetIsDiscovering() bool {
	if x != nil && x.IsDiscovering != nil {
		return *x.IsDiscovering
	}
	return false
}

type CMsgBluetoothDevicesData_Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint32                           `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	AdapterId   *uint32                           `protobuf:"varint,2,opt,name=adapter_id,json=adapterId,def=0" json:"adapter_id,omitempty"`
	Etype       *EBluetoothDeviceType `protobuf:"varint,3,opt,name=etype,enum=EBluetoothDeviceType,def=0" json:"etype,omitempty"`
	Mac         *string                           `protobuf:"bytes,4,opt,name=mac" json:"mac,omitempty"`
	Name        *string                           `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	IsConnected *bool                             `protobuf:"varint,6,opt,name=is_connected,json=isConnected" json:"is_connected,omitempty"`
	IsPaired    *bool                             `protobuf:"varint,7,opt,name=is_paired,json=isPaired" json:"is_paired,omitempty"`
	StrengthRaw *int32                            `protobuf:"varint,8,opt,name=strength_raw,json=strengthRaw" json:"strength_raw,omitempty"`
}

// Default values for CMsgBluetoothDevicesData_Device fields.
const (
	Default_CMsgBluetoothDevicesData_Device_Id        = uint32(0)
	Default_CMsgBluetoothDevicesData_Device_AdapterId = uint32(0)
	Default_CMsgBluetoothDevicesData_Device_Etype     = EBluetoothDeviceType(0) // EBluetoothDeviceType_k_BluetoothDeviceType_Invalid
)

func (x *CMsgBluetoothDevicesData_Device) Reset() {
	*x = CMsgBluetoothDevicesData_Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBluetoothDevicesData_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBluetoothDevicesData_Device) ProtoMessage() {}

func (x *CMsgBluetoothDevicesData_Device) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBluetoothDevicesData_Device.ProtoReflect.Descriptor instead.
func (*CMsgBluetoothDevicesData_Device) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{10, 1}
}

func (x *CMsgBluetoothDevicesData_Device) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CMsgBluetoothDevicesData_Device_Id
}

func (x *CMsgBluetoothDevicesData_Device) GetAdapterId() uint32 {
	if x != nil && x.AdapterId != nil {
		return *x.AdapterId
	}
	return Default_CMsgBluetoothDevicesData_Device_AdapterId
}

func (x *CMsgBluetoothDevicesData_Device) GetEtype() EBluetoothDeviceType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_CMsgBluetoothDevicesData_Device_Etype
}

func (x *CMsgBluetoothDevicesData_Device) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *CMsgBluetoothDevicesData_Device) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgBluetoothDevicesData_Device) GetIsConnected() bool {
	if x != nil && x.IsConnected != nil {
		return *x.IsConnected
	}
	return false
}

func (x *CMsgBluetoothDevicesData_Device) GetIsPaired() bool {
	if x != nil && x.IsPaired != nil {
		return *x.IsPaired
	}
	return false
}

func (x *CMsgBluetoothDevicesData_Device) GetStrengthRaw() int32 {
	if x != nil && x.StrengthRaw != nil {
		return *x.StrengthRaw
	}
	return 0
}

type CMsgCellList_Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId  *uint32 `protobuf:"varint,1,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	LocName *string `protobuf:"bytes,2,opt,name=loc_name,json=locName" json:"loc_name,omitempty"`
}

func (x *CMsgCellList_Cell) Reset() {
	*x = CMsgCellList_Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCellList_Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCellList_Cell) ProtoMessage() {}

func (x *CMsgCellList_Cell) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCellList_Cell.ProtoReflect.Descriptor instead.
func (*CMsgCellList_Cell) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{16, 0}
}

func (x *CMsgCellList_Cell) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CMsgCellList_Cell) GetLocName() string {
	if x != nil && x.LocName != nil {
		return *x.LocName
	}
	return ""
}

var File_steammessages_client_objects_proto protoreflect.FileDescriptor

var file_steammessages_client_objects_proto_rawDesc = []byte{
	0x0a, 0x22, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x96, 0x02, 0x0a, 0x30, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x45, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x01, 0x61, 0x12, 0x4b, 0x0a, 0x01, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x01, 0x62, 0x12, 0x51, 0x0a, 0x01, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x01, 0x63, 0x22, 0x4a, 0x0a, 0x1b, 0x43, 0x4d,
	0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x50, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x86, 0x02, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x34, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x34, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6e, 0x73, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x64, 0x6e, 0x73, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x64, 0x68,
	0x63, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x44, 0x68, 0x63, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0x2d, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x86,
	0x02, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6e, 0x73,
	0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6e, 0x73, 0x49, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x70, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x44, 0x68, 0x63, 0x70,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xa6, 0x08, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x69, 0x73, 0x5f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x57, 0x69, 0x66, 0x69, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x66, 0x69, 0x5f,
	0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x57, 0x69, 0x66, 0x69, 0x53, 0x63,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xf0, 0x06,
	0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2d, 0x0a,
	0x03, 0x69, 0x70, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50,
	0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x69, 0x70, 0x34, 0x12, 0x2d, 0x0a, 0x03,
	0x69, 0x70, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x36,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x69, 0x70, 0x36, 0x12, 0x3a, 0x0a, 0x05, 0x77,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x64,
	0x52, 0x05, 0x77, 0x69, 0x72, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x77, 0x69, 0x72, 0x65, 0x6c,
	0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65,
	0x73, 0x73, 0x52, 0x08, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x1a, 0x7c, 0x0a, 0x05,
	0x57, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x69, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x6d, 0x62, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x4d, 0x62, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x83, 0x03, 0x0a, 0x08, 0x57,
	0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x03, 0x61, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x50,
	0x52, 0x03, 0x61, 0x70, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x65, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x1a, 0x87, 0x02, 0x0a, 0x02, 0x41, 0x50, 0x12, 0x11, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x61, 0x77,
	0x22, 0x94, 0x04, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x69, 0x70, 0x34, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x03, 0x69, 0x70, 0x34, 0x12, 0x2d, 0x0a, 0x03, 0x69, 0x70, 0x36, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x03, 0x69, 0x70, 0x36, 0x12, 0x3e, 0x0a, 0x08, 0x61, 0x70, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x50, 0x48, 0x00, 0x52, 0x07, 0x61, 0x70, 0x4b,
	0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x70, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x50, 0x48, 0x00, 0x52, 0x08, 0x61,
	0x70, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x1a, 0x1e, 0x0a, 0x07, 0x4b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x50, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x61, 0x70, 0x49, 0x64, 0x1a, 0x3c, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x41, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x45, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x61, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xcb, 0x06, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x35, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x1a, 0xa2, 0x01, 0x0a, 0x05, 0x44, 0x72, 0x69, 0x76, 0x65, 0x12, 0x11, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x45, 0x6a, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x8a, 0x04, 0x0a, 0x0b, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x07, 0x64, 0x72, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x6f, 0x6f, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x45,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0xec, 0x01, 0x0a, 0x1d, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x45, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0x6b, 0x5f, 0x45, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x62, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb5, 0x04, 0x0a, 0x18, 0x43, 0x4d, 0x73,
	0x67, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x08, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x08, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x1a, 0x88, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x11, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61,
	0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x92, 0x02, 0x0a, 0x06,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x09, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45, 0x42, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x1d, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x61, 0x69, 0x72, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x61, 0x77,
	0x22, 0x36, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74,
	0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x49, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x74, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24,
	0x0a, 0x0e, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x10, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x74, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x27, 0x0a,
	0x10, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x22, 0x99, 0x01, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x22, 0x72, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x6b, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x68, 0x61,
	0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x74, 0x0a, 0x0c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x65,
	0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x65, 0x6c, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x1a, 0x3a, 0x0a, 0x04, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0x96, 0x02, 0x0a,
	0x1c, 0x45, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x22, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x2f, 0x0a,
	0x2b, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x35,
	0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x70, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x10, 0x04, 0x42, 0x05, 0x48, 0x01, 0x80, 0x01, 0x00,
}

var (
	file_steammessages_client_objects_proto_rawDescOnce sync.Once
	file_steammessages_client_objects_proto_rawDescData = file_steammessages_client_objects_proto_rawDesc
)

func file_steammessages_client_objects_proto_rawDescGZIP() []byte {
	file_steammessages_client_objects_proto_rawDescOnce.Do(func() {
		file_steammessages_client_objects_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_client_objects_proto_rawDescData)
	})
	return file_steammessages_client_objects_proto_rawDescData
}

var file_steammessages_client_objects_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steammessages_client_objects_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_steammessages_client_objects_proto_goTypes = []interface{}{
	(ECloudPendingRemoteOperation)(0),                        // 0: ECloudPendingRemoteOperation
	(*SteamMessagesClientIClientForcedEnumDependencies)(nil), // 1: SteamMessagesClientIClientForcedEnumDependencies
	(*CMsgNetworkDeviceIP4Address)(nil),                      // 2: CMsgNetworkDeviceIP4Address
	(*CMsgNetworkDeviceIP4Config)(nil),                       // 3: CMsgNetworkDeviceIP4Config
	(*CMsgNetworkDeviceIP6Address)(nil),                      // 4: CMsgNetworkDeviceIP6Address
	(*CMsgNetworkDeviceIP6Config)(nil),                       // 5: CMsgNetworkDeviceIP6Config
	(*CMsgNetworkDevicesData)(nil),                           // 6: CMsgNetworkDevicesData
	(*CMsgNetworkDeviceConnect)(nil),                         // 7: CMsgNetworkDeviceConnect
	(*CMsgStorageDevicesData)(nil),                           // 8: CMsgStorageDevicesData
	(*CCloud_PendingRemoteOperation)(nil),                    // 9: CCloud_PendingRemoteOperation
	(*CMsgCloudPendingRemoteOperations)(nil),                 // 10: CMsgCloudPendingRemoteOperations
	(*CMsgBluetoothDevicesData)(nil),                         // 11: CMsgBluetoothDevicesData
	(*CMsgBluetoothSettings)(nil),                            // 12: CMsgBluetoothSettings
	(*CMsgSystemPerfDiagnosticEntry)(nil),                    // 13: CMsgSystemPerfDiagnosticEntry
	(*CMsgSystemPerfNetworkInterface)(nil),                   // 14: CMsgSystemPerfNetworkInterface
	(*CMsgSystemPerfDiagnosticInfo)(nil),                     // 15: CMsgSystemPerfDiagnosticInfo
	(*CMsgSystemPerfSettings)(nil),                           // 16: CMsgSystemPerfSettings
	(*CMsgCellList)(nil),                                     // 17: CMsgCellList
	(*CMsgNetworkDevicesData_Device)(nil),                    // 18: CMsgNetworkDevicesData.Device
	(*CMsgNetworkDevicesData_Device_Wired)(nil),              // 19: CMsgNetworkDevicesData.Device.Wired
	(*CMsgNetworkDevicesData_Device_Wireless)(nil),           // 20: CMsgNetworkDevicesData.Device.Wireless
	(*CMsgNetworkDevicesData_Device_Wireless_AP)(nil),        // 21: CMsgNetworkDevicesData.Device.Wireless.AP
	(*CMsgNetworkDeviceConnect_KnownAP)(nil),                 // 22: CMsgNetworkDeviceConnect.KnownAP
	(*CMsgNetworkDeviceConnect_CustomAP)(nil),                // 23: CMsgNetworkDeviceConnect.CustomAP
	(*CMsgNetworkDeviceConnect_Credentials)(nil),             // 24: CMsgNetworkDeviceConnect.Credentials
	(*CMsgStorageDevicesData_Drive)(nil),                     // 25: CMsgStorageDevicesData.Drive
	(*CMsgStorageDevicesData_BlockDevice)(nil),               // 26: CMsgStorageDevicesData.BlockDevice
	(*CMsgBluetoothDevicesData_Adapter)(nil),                 // 27: CMsgBluetoothDevicesData.Adapter
	(*CMsgBluetoothDevicesData_Device)(nil),                  // 28: CMsgBluetoothDevicesData.Device
	(*CMsgCellList_Cell)(nil),                                // 29: CMsgCellList.Cell
	(EBluetoothDeviceType)(0),                    // 30: EBluetoothDeviceType
	(EStorageBlockContentType)(0),                // 31: EStorageBlockContentType
	(EStorageBlockFileSystemType)(0),             // 32: EStorageBlockFileSystemType
}
var file_steammessages_client_objects_proto_depIdxs = []int32{
	30, // 0: SteamMessagesClientIClientForcedEnumDependencies.a:type_name -> EBluetoothDeviceType
	31, // 1: SteamMessagesClientIClientForcedEnumDependencies.b:type_name -> EStorageBlockContentType
	32, // 2: SteamMessagesClientIClientForcedEnumDependencies.c:type_name -> EStorageBlockFileSystemType
	2,  // 3: CMsgNetworkDeviceIP4Config.addresses:type_name -> CMsgNetworkDeviceIP4Address
	4,  // 4: CMsgNetworkDeviceIP6Config.addresses:type_name -> CMsgNetworkDeviceIP6Address
	18, // 5: CMsgNetworkDevicesData.devices:type_name -> CMsgNetworkDevicesData.Device
	24, // 6: CMsgNetworkDeviceConnect.credentials:type_name -> CMsgNetworkDeviceConnect.Credentials
	3,  // 7: CMsgNetworkDeviceConnect.ip4:type_name -> CMsgNetworkDeviceIP4Config
	5,  // 8: CMsgNetworkDeviceConnect.ip6:type_name -> CMsgNetworkDeviceIP6Config
	22, // 9: CMsgNetworkDeviceConnect.ap_known:type_name -> CMsgNetworkDeviceConnect.KnownAP
	23, // 10: CMsgNetworkDeviceConnect.ap_custom:type_name -> CMsgNetworkDeviceConnect.CustomAP
	25, // 11: CMsgStorageDevicesData.drives:type_name -> CMsgStorageDevicesData.Drive
	26, // 12: CMsgStorageDevicesData.block_devices:type_name -> CMsgStorageDevicesData.BlockDevice
	0,  // 13: CCloud_PendingRemoteOperation.operation:type_name -> ECloudPendingRemoteOperation
	9,  // 14: CMsgCloudPendingRemoteOperations.operations:type_name -> CCloud_PendingRemoteOperation
	27, // 15: CMsgBluetoothDevicesData.adapters:type_name -> CMsgBluetoothDevicesData.Adapter
	28, // 16: CMsgBluetoothDevicesData.devices:type_name -> CMsgBluetoothDevicesData.Device
	13, // 17: CMsgSystemPerfDiagnosticInfo.entries:type_name -> CMsgSystemPerfDiagnosticEntry
	14, // 18: CMsgSystemPerfDiagnosticInfo.interfaces:type_name -> CMsgSystemPerfNetworkInterface
	29, // 19: CMsgCellList.cells:type_name -> CMsgCellList.Cell
	3,  // 20: CMsgNetworkDevicesData.Device.ip4:type_name -> CMsgNetworkDeviceIP4Config
	5,  // 21: CMsgNetworkDevicesData.Device.ip6:type_name -> CMsgNetworkDeviceIP6Config
	19, // 22: CMsgNetworkDevicesData.Device.wired:type_name -> CMsgNetworkDevicesData.Device.Wired
	20, // 23: CMsgNetworkDevicesData.Device.wireless:type_name -> CMsgNetworkDevicesData.Device.Wireless
	21, // 24: CMsgNetworkDevicesData.Device.Wireless.aps:type_name -> CMsgNetworkDevicesData.Device.Wireless.AP
	31, // 25: CMsgStorageDevicesData.BlockDevice.content_type:type_name -> EStorageBlockContentType
	32, // 26: CMsgStorageDevicesData.BlockDevice.filesystem_type:type_name -> EStorageBlockFileSystemType
	30, // 27: CMsgBluetoothDevicesData.Device.etype:type_name -> EBluetoothDeviceType
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_steammessages_client_objects_proto_init() }
func file_steammessages_client_objects_proto_init() {
	if File_steammessages_client_objects_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_steammessages_client_objects_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteamMessagesClientIClientForcedEnumDependencies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDeviceIP4Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDeviceIP4Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDeviceIP6Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDeviceIP6Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDevicesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDeviceConnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgStorageDevicesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_PendingRemoteOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCloudPendingRemoteOperations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBluetoothDevicesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBluetoothSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemPerfDiagnosticEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemPerfNetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemPerfDiagnosticInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemPerfSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCellList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDevicesData_Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDevicesData_Device_Wired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDevicesData_Device_Wireless); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDevicesData_Device_Wireless_AP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDeviceConnect_KnownAP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDeviceConnect_CustomAP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDeviceConnect_Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgStorageDevicesData_Drive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgStorageDevicesData_BlockDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBluetoothDevicesData_Adapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBluetoothDevicesData_Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCellList_Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_steammessages_client_objects_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*CMsgNetworkDeviceConnect_ApKnown)(nil),
		(*CMsgNetworkDeviceConnect_ApCustom)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_client_objects_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_client_objects_proto_goTypes,
		DependencyIndexes: file_steammessages_client_objects_proto_depIdxs,
		EnumInfos:         file_steammessages_client_objects_proto_enumTypes,
		MessageInfos:      file_steammessages_client_objects_proto_msgTypes,
	}.Build()
	File_steammessages_client_objects_proto = out.File
	file_steammessages_client_objects_proto_rawDesc = nil
	file_steammessages_client_objects_proto_goTypes = nil
	file_steammessages_client_objects_proto_depIdxs = nil
}
